!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/jildert/of_v0.12.0-rc1_linux64gcc6_release/addons/ofxJVisuals/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
AlphaBlackScreen	src/AlphaBlackScreen.cpp	/^AlphaBlackScreen::AlphaBlackScreen(bool state){$/;"	f	class:AlphaBlackScreen
AlphaBlackScreen	src/AlphaBlackScreen.hpp	/^class AlphaBlackScreen: public JEvent{$/;"	c
AlphaBlackScreen_hpp	src/AlphaBlackScreen.hpp	/^#define AlphaBlackScreen_hpp$/;"	d
Bin	src/Event/JVideoPlayer.hpp	/^    Bin(){};$/;"	f	class:Bin
Bin	src/Event/JVideoPlayer.hpp	/^class Bin: public JEvent{$/;"	c
CFBundleDevelopmentRegion	exampleSimple/openFrameworks-Info.plist	/^	<key>CFBundleDevelopmentRegion<\/key>$/;"	k
CFBundleDevelopmentRegion	exampleSimpleTlFix/openFrameworks-Info.plist	/^	<key>CFBundleDevelopmentRegion<\/key>$/;"	k
CFBundleExecutable	exampleSimple/openFrameworks-Info.plist	/^	<key>CFBundleExecutable<\/key>$/;"	k
CFBundleExecutable	exampleSimpleTlFix/openFrameworks-Info.plist	/^	<key>CFBundleExecutable<\/key>$/;"	k
CFBundleIconFile	exampleSimple/openFrameworks-Info.plist	/^	<key>CFBundleIconFile<\/key>$/;"	k
CFBundleIconFile	exampleSimpleTlFix/openFrameworks-Info.plist	/^	<key>CFBundleIconFile<\/key>$/;"	k
CFBundleIdentifier	exampleSimple/openFrameworks-Info.plist	/^	<key>CFBundleIdentifier<\/key>$/;"	k
CFBundleIdentifier	exampleSimpleTlFix/openFrameworks-Info.plist	/^	<key>CFBundleIdentifier<\/key>$/;"	k
CFBundleInfoDictionaryVersion	exampleSimple/openFrameworks-Info.plist	/^	<key>CFBundleInfoDictionaryVersion<\/key>$/;"	k
CFBundleInfoDictionaryVersion	exampleSimpleTlFix/openFrameworks-Info.plist	/^	<key>CFBundleInfoDictionaryVersion<\/key>$/;"	k
CFBundlePackageType	exampleSimple/openFrameworks-Info.plist	/^	<key>CFBundlePackageType<\/key>$/;"	k
CFBundlePackageType	exampleSimpleTlFix/openFrameworks-Info.plist	/^	<key>CFBundlePackageType<\/key>$/;"	k
CFBundleSignature	exampleSimple/openFrameworks-Info.plist	/^	<key>CFBundleSignature<\/key>$/;"	k
CFBundleSignature	exampleSimpleTlFix/openFrameworks-Info.plist	/^	<key>CFBundleSignature<\/key>$/;"	k
CFBundleVersion	exampleSimple/openFrameworks-Info.plist	/^	<key>CFBundleVersion<\/key>$/;"	k
CFBundleVersion	exampleSimpleTlFix/openFrameworks-Info.plist	/^	<key>CFBundleVersion<\/key>$/;"	k
CIRCLES	src/Event/JVecField.hpp	/^    CIRCLES,$/;"	e	enum:VECFIELD_MODE
COLOR	src/modifiers/JModifierRedraw.hpp	/^  COLOR$/;"	e	enum:JModifierRedraw::RedrawMode
Compatibility	README.md	/^Compatibility$/;"	s	chapter:ofxJVisuals
ConnectionType	src/Event/JEventBase.hpp	/^enum ConnectionType {$/;"	g	namespace:jevent
DEFAULT	src/Event/JImage.hpp	/^        DEFAULT$/;"	e	enum:JImage::DrawMode
DEFAULT	src/MsgParser.hpp	/^    DEFAULT$/;"	e	enum:VisualizerLayer
DENSITY	src/Wavetable.h	/^#define DENSITY /;"	d
DRAW_VID	src/Event/JVecField.cpp	/^#define DRAW_VID /;"	d	file:
DUMMY0	src/MsgParser.hpp	/^    DUMMY0,$/;"	e	enum:VisualizerLayer
DUMMY1	src/MsgParser.hpp	/^    DUMMY1,$/;"	e	enum:VisualizerLayer
DUMMY2	src/MsgParser.hpp	/^    DUMMY2,$/;"	e	enum:VisualizerLayer
DUMMY3	src/MsgParser.hpp	/^    DUMMY3,$/;"	e	enum:VisualizerLayer
DUMMY4	src/MsgParser.hpp	/^    DUMMY4,$/;"	e	enum:VisualizerLayer
DUMMY5	src/MsgParser.hpp	/^    DUMMY5,$/;"	e	enum:VisualizerLayer
Dependencies	README.md	/^Dependencies$/;"	s	chapter:ofxJVisuals
DrawMode	src/Event/JImage.hpp	/^    enum DrawMode{$/;"	g	class:JImage
Env	src/Env.cpp	/^Env::Env(){$/;"	f	class:Env
Env	src/Env.cpp	/^Env::Env(vector<float> levels, vector<float> times) : levels(levels), times(times){$/;"	f	class:Env
Env	src/Env.cpp	/^Env::Env(vector<float> levels, vector<float> times, float* f, char curve){$/;"	f	class:Env
Env	src/Env.cpp	/^Env::Env(vector<float> levels, vector<float> times, float* f, ofxeasing::function func){$/;"	f	class:Env
Env	src/Env.cpp	/^Env::Env(vector<float> levels, vector<float> times, int* i, char curve){$/;"	f	class:Env
Env	src/Env.cpp	/^Env::Env(vector<float> levels, vector<float> times, ofColor* c, char curve){$/;"	f	class:Env
Env	src/Env.hpp	/^class Env{$/;"	c
Env_hpp	src/Env.hpp	/^#define Env_hpp$/;"	d
FBOs	src/Event/JPPBuffer.h	/^    ofFbo   FBOs[2];    \/\/ Real addresses of ping\/pong FBOÂ«s$/;"	m	struct:pingPongBuffer	typeref:typename:ofFbo[2]
FUNCTIONAL	src/MsgParser.hpp	/^    FUNCTIONAL, \/\/ Should be deleted?$/;"	e	enum:VisualizerLayer
HIDE	src/Event/JVecField.hpp	/^    HIDE,$/;"	e	enum:VECFIELD_MODE
HORIZONTAL	src/Event/JNoise.hpp	/^    HORIZONTAL,$/;"	e	enum:JNOISE_MODE
How to use	README.md	/^## How to use$/;"	s	chapter:ofxJVisuals
Image_hpp	src/Event/JImage.hpp	/^#define Image_hpp$/;"	d
Installation	README.md	/^Installation$/;"	s	chapter:ofxJVisuals
Introduction	README.md	/^Introduction$/;"	s	chapter:ofxJVisuals
JBufferSender	src/Event/JEventBase.hpp	/^  JBufferSender,$/;"	e	enum:jevent::JEventType
JCircle	src/Event/JPrimitive.hpp	/^    JCircle(glm::vec3 loc = glm::vec3(0)){$/;"	f	class:JCircle
JCircle	src/Event/JPrimitive.hpp	/^class JCircle: public JPrimitive{$/;"	c
JDivisionGrid	src/Event/JDivisionGrid.cpp	/^JDivisionGrid::JDivisionGrid(glm::vec2 size){$/;"	f	class:JDivisionGrid
JDivisionGrid	src/Event/JDivisionGrid.hpp	/^class JDivisionGrid: public JEvent{$/;"	c
JDivisionGrid_hpp	src/Event/JDivisionGrid.hpp	/^#define JDivisionGrid_hpp$/;"	d
JEvent	src/Event/JEvent.cpp	/^JEvent::JEvent(){$/;"	f	class:JEvent
JEvent	src/Event/JEvent.hpp	/^class JEvent : public JEventBase {$/;"	c
JEventBase	src/Event/JEventBase.hpp	/^  JEventBase() {$/;"	f	class:JEventBase
JEventBase	src/Event/JEventBase.hpp	/^class JEventBase {$/;"	c
JEventBase_hpp	src/Event/JEventBase.hpp	/^#define JEventBase_hpp$/;"	d
JEventDynamicS	src/Event/JEventBase.hpp	/^  JEventDynamicS \/\/ This is only used for compilation of code. Object should be$/;"	e	enum:jevent::JEventType
JEventType	src/Event/JEventBase.hpp	/^enum JEventType {$/;"	g	namespace:jevent
JEvent_hpp	src/Event/JEvent.hpp	/^#define JEvent_hpp$/;"	d
JFunctionTrigger	src/Event/JEventBase.hpp	/^  JFunctionTrigger,$/;"	e	enum:jevent::JEventType
JImage	src/Event/JImage.cpp	/^JImage::JImage(string filename, glm::vec3 loc){$/;"	f	class:JImage
JImage	src/Event/JImage.hpp	/^    JImage(){};$/;"	f	class:JImage
JImage	src/Event/JImage.hpp	/^class JImage: public JEvent{$/;"	c
JLayer	src/ofxJVisuals.hpp	/^  JLayer(){};$/;"	f	class:JLayer
JLayer	src/ofxJVisuals.hpp	/^class JLayer : public JEvent { \/\/ What does it do?$/;"	c
JLine	src/Event/JEventBase.hpp	/^  JLine,$/;"	e	enum:jevent::JEventType
JLine	src/Event/JLine.cpp	/^JLine::JLine(){$/;"	f	class:JLine
JLine	src/Event/JLine.hpp	/^class JLine: public JEvent{$/;"	c
JLine_hpp	src/Event/JLine.hpp	/^#define JLine_hpp$/;"	d
JMesh	src/Event/JMesh.cpp	/^JMesh::JMesh(){$/;"	f	class:JMesh
JMesh	src/Event/JMesh.hpp	/^class JMesh: public JEvent{$/;"	c
JMesh_hpp	src/Event/JMesh.hpp	/^#define JMesh_hpp$/;"	d
JMirror	src/Event/JMirror.cpp	/^JMirror::JMirror(){$/;"	f	class:JMirror
JMirror	src/Event/JMirror.cpp	/^JMirror::JMirror(glm::vec2 size, glm::vec3 loc){$/;"	f	class:JMirror
JMirror	src/Event/JMirror.h	/^class JMirror: public JEvent{$/;"	c
JMirror_h	src/Event/JMirror.h	/^#define JMirror_h$/;"	d
JModifier	src/modifiers/JModifier.cpp	/^JModifier::JModifier(){$/;"	f	class:JModifier
JModifier	src/modifiers/JModifier.hpp	/^class JModifier: public JEvent{$/;"	c
JModifierArray	src/Event/JEventBase.hpp	/^  JModifierArray,$/;"	e	enum:jevent::JEventType
JModifierArray	src/modifiers/JModifierArray.hpp	/^    JModifierArray(){$/;"	f	class:JModifierArray
JModifierArray	src/modifiers/JModifierArray.hpp	/^class JModifierArray: public JModifier{$/;"	c
JModifierArray_hpp	src/modifiers/JModifierArray.hpp	/^#define JModifierArray_hpp$/;"	d
JModifierFact	src/modifiers/JModifierFact.hpp	/^    JModifierFact(){};$/;"	f	class:JModifierFact
JModifierFact	src/modifiers/JModifierFact.hpp	/^class JModifierFact{$/;"	c
JModifierFact_hpp	src/modifiers/JModifierFact.hpp	/^#define JModifierFact_hpp$/;"	d
JModifierRedraw	src/Event/JEventBase.hpp	/^  JModifierRedraw,$/;"	e	enum:jevent::JEventType
JModifierRedraw	src/modifiers/JModifierRedraw.hpp	/^    JModifierRedraw(){$/;"	f	class:JModifierRedraw
JModifierRedraw	src/modifiers/JModifierRedraw.hpp	/^class JModifierRedraw: public JModifier{$/;"	c
JModifierRedraw_hpp	src/modifiers/JModifierRedraw.hpp	/^#define JModifierRedraw_hpp$/;"	d
JModifier_hpp	src/modifiers/JModifier.hpp	/^#define JModifier_hpp$/;"	d
JNOISE_MODE	src/Event/JNoise.hpp	/^enum JNOISE_MODE{$/;"	g
JNoise	src/Event/JNoise.cpp	/^JNoise::JNoise(float duration, ofColor color, char mode, short int linesAmount){$/;"	f	class:JNoise
JNoise	src/Event/JNoise.hpp	/^class JNoise: public JEvent{$/;"	c
JNoise_hpp	src/Event/JNoise.hpp	/^#define JNoise_hpp$/;"	d
JParticle	src/Event/JParticle.cpp	/^JParticle::JParticle(){$/;"	f	class:JParticle
JParticle	src/Event/JParticle.cpp	/^JParticle::JParticle(glm::vec3 *destination, bool startAtDest){$/;"	f	class:JParticle
JParticle	src/Event/JParticle.cpp	/^JParticle::JParticle(glm::vec3 destination){$/;"	f	class:JParticle
JParticle	src/Event/JParticle.h	/^class JParticle: public JEventBase{$/;"	c
JPhysarum	src/Event/JPhysarum.cpp	/^JPhysarum::JPhysarum(glm::vec2 loc, glm::vec2 size){$/;"	f	class:JPhysarum
JPhysarum	src/Event/JPhysarum.hpp	/^class JPhysarum: public JEvent{$/;"	c
JPhysarum_hpp	src/Event/JPhysarum.hpp	/^#define JPhysarum_hpp$/;"	d
JPoly	src/Event/JDivisionGrid.hpp	/^    JPoly(){ m.clear(); m.setMode(OF_PRIMITIVE_TRIANGLES);}$/;"	f	class:JPoly
JPoly	src/Event/JDivisionGrid.hpp	/^class JPoly: public JMesh{$/;"	c
JPrimitive	src/Event/JPrimitive.hpp	/^    JPrimitive(){};$/;"	f	class:JPrimitive
JPrimitive	src/Event/JPrimitive.hpp	/^class JPrimitive: public JEvent{$/;"	c
JPrimitive_hpp	src/Event/JPrimitive.hpp	/^#define JPrimitive_hpp$/;"	d
JRectangle	src/Event/JEventBase.hpp	/^  JRectangle,$/;"	e	enum:jevent::JEventType
JRectangle	src/Event/JRectangle.cpp	/^JRectangle::JRectangle(){$/;"	f	class:JRectangle
JRectangle	src/Event/JRectangle.cpp	/^JRectangle::JRectangle(float millisTime, glm::vec3 loc, glm::vec3 size, ofColor color, float att/;"	f	class:JRectangle
JRectangle	src/Event/JRectangle.cpp	/^JRectangle::JRectangle(glm::vec2 loc, glm::vec2 size) : JRectangle(glm::vec3(loc, 0.0), glm::vec/;"	f	class:JRectangle
JRectangle	src/Event/JRectangle.cpp	/^JRectangle::JRectangle(glm::vec3 loc, glm::vec3 size) : JRectangle(){$/;"	f	class:JRectangle
JRectangle	src/Event/JRectangle.hpp	/^class JRectangle: public JPrimitive, public JThickLine{ \/\/ Also inherits from Event$/;"	c
JRectangle_hpp	src/Event/JRectangle.hpp	/^#define JRectangle_hpp$/;"	d
JShader	src/Event/JEventBase.hpp	/^  JShader,       \/\/ 8$/;"	e	enum:jevent::JEventType
JShader	src/JShader.cpp	/^JShader::JShader() {}$/;"	f	class:JShader
JShader	src/JShader.hpp	/^class JShader : public JEvent {$/;"	c
JShaderLines	src/JShaderLines.cpp	/^JShaderLines::JShaderLines(){$/;"	f	class:JShaderLines
JShaderLines	src/JShaderLines.hpp	/^class JShaderLines: public JShader{$/;"	c
JShaderLines_hpp	src/JShaderLines.hpp	/^#define JShaderLines_hpp$/;"	d
JShaderTest	src/Event/JShaderTest.cpp	/^JShaderTest::JShaderTest(glm::vec2 size){$/;"	f	class:JShaderTest
JShaderTest	src/Event/JShaderTest.hpp	/^class JShaderTest: public JEvent{$/;"	c
JShaderTest_hpp	src/Event/JShaderTest.hpp	/^#define JShaderTest_hpp$/;"	d
JShader_hpp	src/JShader.hpp	/^#define JShader_hpp$/;"	d
JSvg	src/Event/JImage.hpp	/^  JSvg(string path){$/;"	f	class:JSvg
JSvg	src/Event/JImage.hpp	/^class JSvg: public JEvent{$/;"	c
JText	src/Event/JText.cpp	/^JText::JText(ofTrueTypeFont* f){$/;"	f	class:JText
JText	src/Event/JText.hpp	/^class JText: public JEvent{$/;"	c
JText_hpp	src/Event/JText.hpp	/^#define JText_hpp$/;"	d
JThickLine	src/Event/JThickLine.hpp	/^  JThickLine(){};$/;"	f	class:JThickLine
JThickLine	src/Event/JThickLine.hpp	/^class JThickLine{$/;"	c
JThickLine_hpp	src/Event/JThickLine.hpp	/^#define JThickLine_hpp$/;"	d
JVIDEO_MODE_ASCII	src/Event/JVideoPlayer.hpp	/^    JVIDEO_MODE_ASCII$/;"	e	enum:__anona16510d10103
JVIDEO_MODE_BINS	src/Event/JVideoPlayer.hpp	/^    JVIDEO_MODE_BINS,$/;"	e	enum:__anona16510d10103
JVIDEO_MODE_NORMAL	src/Event/JVideoPlayer.hpp	/^    JVIDEO_MODE_NORMAL,$/;"	e	enum:__anona16510d10103
JVecField	src/Event/JVecField.cpp	/^JVecField::JVecField(){$/;"	f	class:JVecField
JVecField	src/Event/JVecField.hpp	/^class JVecField: public JEvent{$/;"	c
JVideoPlayer	src/Event/JVideoPlayer.cpp	/^JVideoPlayer::JVideoPlayer(){$/;"	f	class:JVideoPlayer
JVideoPlayer	src/Event/JVideoPlayer.hpp	/^class JVideoPlayer: public JEvent{$/;"	c
JVideoPlayer_hpp	src/Event/JVideoPlayer.hpp	/^#define JVideoPlayer_hpp$/;"	d
JVorm	src/Event/JEventBase.hpp	/^  JVorm,$/;"	e	enum:jevent::JEventType
JVorm	src/Event/JVorm.cpp	/^JVorm::JVorm(uint8 numSides, int sideDiv, float radius, glm::vec3 loc, bool on_destination){$/;"	f	class:JVorm
JVorm	src/Event/JVorm.h	/^class JVorm: public JEvent{$/;"	c
JWaveform	src/Event/JEventBase.hpp	/^  JWaveform,$/;"	e	enum:jevent::JEventType
JWaveform	src/Event/JWaveform.cpp	/^JWaveform::JWaveform(){$/;"	f	class:JWaveform
JWaveform	src/Event/JWaveform.hpp	/^class JWaveform: public JEvent{$/;"	c
JWaveform_hpp	src/Event/JWaveform.hpp	/^#define JWaveform_hpp$/;"	d
Known issues	README.md	/^Known issues$/;"	s	chapter:ofxJVisuals
LINES	src/Event/JVecField.hpp	/^    LINES,$/;"	e	enum:VECFIELD_MODE
License	README.md	/^License$/;"	s	chapter:ofxJVisuals
MAX_EVENTS_PTRS	src/config.h	/^#define MAX_EVENTS_PTRS /;"	d
MODE	src/modifiers/JModifierRedraw.hpp	/^  MODE,$/;"	e	enum:JModifierRedraw::RedrawMode
Modifier	src/Event/JEventBase.hpp	/^  Modifier,$/;"	e	enum:jevent::ConnectionType
MsgParser	src/MsgParser.cpp	/^MsgParser::MsgParser(ofxJVisuals *v, bool bUseSC) : v(v), bUseSC(bUseSC) {$/;"	f	class:MsgParser
MsgParser	src/MsgParser.hpp	/^class MsgParser{$/;"	c
MsgParser_hpp	src/MsgParser.hpp	/^#define MsgParser_hpp$/;"	d
MultiMesh	src/Event/MultiMesh.cpp	/^MultiMesh::MultiMesh(int size, ofFloatColor color){$/;"	f	class:MultiMesh
MultiMesh	src/Event/MultiMesh.hpp	/^class MultiMesh: public JEvent{$/;"	c
MultiMeshMaybeTomorrow	src/Event/MultiMeshMaybeTomorrow.cpp	/^MultiMeshMaybeTomorrow::MultiMeshMaybeTomorrow(int num, ofFloatColor color){$/;"	f	class:MultiMeshMaybeTomorrow
MultiMeshMaybeTomorrow	src/Event/MultiMeshMaybeTomorrow.hpp	/^class MultiMeshMaybeTomorrow: public JEvent{$/;"	c
MultiMeshMaybeTomorrow_hpp	src/Event/MultiMeshMaybeTomorrow.hpp	/^#define MultiMeshMaybeTomorrow_hpp$/;"	d
MultiMesh_hpp	src/Event/MultiMesh.hpp	/^#define MultiMesh_hpp$/;"	d
NEGATIVE	src/MsgParser.hpp	/^    NEGATIVE, \/\/ Dummies, otherwise this would be 3, and override layer 3...$/;"	e	enum:VisualizerLayer
NON_CAM_BACK	src/MsgParser.hpp	/^    NON_CAM_BACK,$/;"	e	enum:VisualizerLayer
NON_CAM_FRONT	src/MsgParser.hpp	/^    NON_CAM_FRONT,$/;"	e	enum:VisualizerLayer
NSCameraUsageDescription	exampleSimple/openFrameworks-Info.plist	/^	<key>NSCameraUsageDescription<\/key>$/;"	k
NSCameraUsageDescription	exampleSimpleTlFix/openFrameworks-Info.plist	/^	<key>NSCameraUsageDescription<\/key>$/;"	k
NSHighResolutionCapable	exampleSimple/openFrameworks-Info.plist	/^	<key>NSHighResolutionCapable<\/key>$/;"	k
NSHighResolutionCapable	exampleSimpleTlFix/openFrameworks-Info.plist	/^	<key>NSHighResolutionCapable<\/key>$/;"	k
NSMicrophoneUsageDescription	exampleSimple/openFrameworks-Info.plist	/^	<key>NSMicrophoneUsageDescription<\/key>$/;"	k
NSMicrophoneUsageDescription	exampleSimpleTlFix/openFrameworks-Info.plist	/^	<key>NSMicrophoneUsageDescription<\/key>$/;"	k
NUMLAYERS	src/config.h	/^#define NUMLAYERS /;"	d
NUM_BUSSES	src/Event/JEventBase.hpp	/^#define NUM_BUSSES /;"	d
OF_ROOT	exampleSimple/Makefile	/^	OF_ROOT=$(realpath ..\/..\/..)$/;"	m
OF_ROOT	exampleSimpleTlFix/Makefile	/^	OF_ROOT=$(realpath ..\/..\/..)$/;"	m
PERLIN	src/Event/JVecField.hpp	/^    PERLIN,$/;"	e	enum:VECFIELD_MODE
PHYSARUMGUI	src/Event/JPhysarum.hpp	/^#define PHYSARUMGUI /;"	d
Pointer	src/Env.hpp	/^    Pointer(float* valF){$/;"	f	class:Pointer
Pointer	src/Env.hpp	/^    Pointer(int* valI){$/;"	f	class:Pointer
Pointer	src/Env.hpp	/^    Pointer(ofColor* valC){$/;"	f	class:Pointer
Pointer	src/Env.hpp	/^class Pointer{$/;"	c
RECEIVER_PORT	src/ofxJVisuals.cpp	/^#define RECEIVER_PORT /;"	d	file:
RectangleMask	src/Event/RectangleMask.cpp	/^RectangleMask::RectangleMask(){$/;"	f	class:RectangleMask
RectangleMask	src/Event/RectangleMask.cpp	/^RectangleMask::RectangleMask(JRectangle* r){$/;"	f	class:RectangleMask
RectangleMask	src/Event/RectangleMask.hpp	/^class RectangleMask: public JEvent{$/;"	c
RectangleMask_hpp	src/Event/RectangleMask.hpp	/^#define RectangleMask_hpp$/;"	d
RedrawMode	src/modifiers/JModifierRedraw.hpp	/^enum RedrawMode {$/;"	g	class:JModifierRedraw
SC_FOLDER	src/config.h	/^#define SC_FOLDER /;"	d
SC_PORT	src/config.h	/^#define SC_PORT /;"	d
SCsender	src/MsgParser.hpp	/^    ofxOscSender* SCsender = nullptr;$/;"	m	class:MsgParser	typeref:typename:ofxOscSender *
SCsender	src/ofxJVisuals.hpp	/^  ofxOscSender *SCsender = nullptr;$/;"	m	class:ofxJVisuals	typeref:typename:ofxOscSender *
SHADER_PATH	src/config.h	/^#define SHADER_PATH /;"	d
SpaceCube	src/Event/SpaceCube.cpp	/^SpaceCube::SpaceCube(ofVec3f loc_, ofVec3f size_, int points_amount_, int gridsize){$/;"	f	class:SpaceCube
SpaceCube	src/Event/SpaceCube.h	/^class SpaceCube: public JEvent{$/;"	c
TEST	src/Event/JVecField.hpp	/^    TEST,$/;"	e	enum:VECFIELD_MODE
TEXTURE	src/Event/JVecField.hpp	/^    TEXTURE$/;"	e	enum:VECFIELD_MODE
UNDERLAYING	src/Event/JVecField.hpp	/^    UNDERLAYING,$/;"	e	enum:VECFIELD_MODE
USE_FRAMES_AS_CLOCK	src/Env.hpp	/^#define USE_FRAMES_AS_CLOCK /;"	d
USE_OPENCL	src/config.h	/^#define USE_OPENCL /;"	d
USE_PP	src/config.h	/^#define USE_PP /;"	d
USE_SC	src/config.h	/^#define USE_SC /;"	d
VECFIELD_MODE	src/Event/JVecField.hpp	/^enum VECFIELD_MODE{$/;"	g
VERTICAL	src/Event/JNoise.hpp	/^    VERTICAL$/;"	e	enum:JNOISE_MODE
VIDEO	src/Event/JVecField.hpp	/^    VIDEO,$/;"	e	enum:VECFIELD_MODE
Version 0.1 (15-10-2021):	README.md	/^### Version 0.1 (15-10-2021):$/;"	S	section:ofxJVisuals""Version history
Version history	README.md	/^Version history$/;"	s	chapter:ofxJVisuals
VisualizerLayer	src/MsgParser.hpp	/^enum VisualizerLayer {$/;"	g
Wavetable	src/Wavetable.cpp	/^Wavetable::Wavetable(){$/;"	f	class:Wavetable
Wavetable	src/Wavetable.cpp	/^Wavetable::Wavetable(float freq, float offset, int mode, float pulseWidth){$/;"	f	class:Wavetable
Wavetable	src/Wavetable.h	/^class Wavetable{$/;"	c
__Batobe_met_MIDI__Wavetable__	src/Wavetable.h	/^#define __Batobe_met_MIDI__Wavetable__$/;"	d
__Shapes__JParticle__	src/Event/JParticle.h	/^#define __Shapes__JParticle__$/;"	d
__Shapes__JVorm__	src/Event/JVorm.h	/^#define __Shapes__JVorm__$/;"	d
__Shapes_met_Osc__SpaceCube__	src/Event/SpaceCube.h	/^#define __Shapes_met_Osc__SpaceCube__$/;"	d
__anon240f87380108	src/Event/particleSystemOpenCL.cpp	/^typedef struct{$/;"	s	file:
__anona16510d10103	src/Event/JVideoPlayer.hpp	/^enum{$/;"	g
__anonb680d16f0108	src/Event/JEvent.hpp	/^  struct {$/;"	s	class:JEvent
acceleration	src/Event/JParticle.h	/^    glm::vec3 acceleration;$/;"	m	class:JParticle	typeref:typename:glm::vec3
active	src/Env.hpp	/^    bool active = true;$/;"	m	class:Env	typeref:typename:bool
active	src/Event/JEvent.hpp	/^  bool active = false;$/;"	m	class:JEvent	typeref:typename:bool
addConnection	src/Event/JVorm.cpp	/^void JVorm::addConnection(JVorm* JVorm, bool repeat){ \/\/ repeat = true$/;"	f	class:JVorm	typeref:typename:void
addEnv	src/Event/JEvent.cpp	/^Env* JEvent::addEnv(Env* e){$/;"	f	class:JEvent	typeref:typename:Env *
addEnv	src/Event/JEvent.cpp	/^Env* JEvent::addEnv(vector<float> levels, vector<float> times, float* f, char curve){$/;"	f	class:JEvent	typeref:typename:Env *
addEnv	src/Event/JEvent.cpp	/^Env* JEvent::addEnv(vector<float> levels, vector<float> times, int* i, char curve){$/;"	f	class:JEvent	typeref:typename:Env *
addEnv	src/Event/JEvent.cpp	/^Env* JEvent::addEnv(vector<float> levels, vector<float> times, ofColor* c, char curve){$/;"	f	class:JEvent	typeref:typename:Env *
addEnv	src/MsgParser.cpp	/^void MsgParser::addEnv(ofxOscMessage &m) {$/;"	f	class:MsgParser	typeref:typename:void
addEnvAlpha	src/Event/JEvent.cpp	/^void JEvent::addEnvAlpha(float a, float s, float r, float alpha){$/;"	f	class:JEvent	typeref:typename:void
addEnvAlpha	src/Event/JEvent.cpp	/^void JEvent::addEnvAlpha(vector<float> levels, vector<float> times, char curve){$/;"	f	class:JEvent	typeref:typename:void
addEnvRandomPoly	src/Event/JDivisionGrid.cpp	/^Env* JDivisionGrid::addEnvRandomPoly(vector<float> values, vector<float> times){$/;"	f	class:JDivisionGrid	typeref:typename:Env *
addEnvSelectedPoly	src/Event/JDivisionGrid.cpp	/^Env* JDivisionGrid::addEnvSelectedPoly(vector<float> values, vector<float> times){$/;"	f	class:JDivisionGrid	typeref:typename:Env *
addEvent	src/Event/JEvent.cpp	/^void JEvent::addEvent(JEvent* toAdd){$/;"	f	class:JEvent	typeref:typename:void
addEvent	src/ofxJVisuals.cpp	/^JEvent *MsgParser::addEvent(JEvent *e, int layerIndex, int index,$/;"	f	class:MsgParser	typeref:typename:JEvent *
addEvent	src/ofxJVisuals.cpp	/^JEvent *ofxJVisuals::addEvent(JEvent *e, VisualizerLayer l, int index) {$/;"	f	class:ofxJVisuals	typeref:typename:JEvent *
addEvent	src/ofxJVisuals.cpp	/^JEvent *ofxJVisuals::addEvent(JEvent *e, int layerIndex, int index,$/;"	f	class:ofxJVisuals	typeref:typename:JEvent *
addEventAsFirst	src/Event/JEvent.cpp	/^void JEvent::addEventAsFirst(JEvent* toAdd){$/;"	f	class:JEvent	typeref:typename:void
addFace	src/Event/meshLandscape.cpp	/^void meshLandscape::addFace(ofMesh& mesh, ofVec3f a, ofVec3f b, ofVec3f c) {$/;"	f	class:meshLandscape	typeref:typename:void
addFace	src/Event/meshLandscape.cpp	/^void meshLandscape::addFace(ofMesh& mesh, ofVec3f a, ofVec3f b, ofVec3f c, ofVec3f d) {$/;"	f	class:meshLandscape	typeref:typename:void
addPtr	src/Event/JEvent.cpp	/^void JEvent::addPtr(JEvent** p){$/;"	f	class:JEvent	typeref:typename:void
addPtr	src/Event/JRectangle.cpp	/^void JRectangle::addPtr(JRectangle** p){$/;"	f	class:JRectangle	typeref:typename:void
addPtr	src/Event/RectangleMask.cpp	/^void RectangleMask::addPtr(RectangleMask** p){$/;"	f	class:RectangleMask	typeref:typename:void
addRadius	src/Event/MultiMesh.cpp	/^void MultiMesh::addRadius(float radiusIncrease){$/;"	f	class:MultiMesh	typeref:typename:void
addRadius	src/Event/MultiMeshMaybeTomorrow.cpp	/^void MultiMeshMaybeTomorrow::addRadius(float radiusIncrease){$/;"	f	class:MultiMeshMaybeTomorrow	typeref:typename:void
addRandomMesh	src/Event/MultiMesh.cpp	/^void MultiMesh::addRandomMesh(float radiusTemp, ofFloatColor color){$/;"	f	class:MultiMesh	typeref:typename:void
addRandomMesh	src/Event/MultiMeshMaybeTomorrow.cpp	/^void MultiMeshMaybeTomorrow::addRandomMesh(float radiusTemp, ofFloatColor color){$/;"	f	class:MultiMeshMaybeTomorrow	typeref:typename:void
addRect	src/Event/RectangleMask.cpp	/^void RectangleMask::addRect(JRectangle* r){$/;"	f	class:RectangleMask	typeref:typename:void
addTo	src/MsgParser.cpp	/^void MsgParser::addTo(ofxOscMessage &m) {$/;"	f	class:MsgParser	typeref:typename:void
addToCenter	src/Event/JVorm.cpp	/^void JVorm::addToCenter(glm::vec3 add){$/;"	f	class:JVorm	typeref:typename:void
addVector	src/Event/JRectangle.cpp	/^void JRectangle::addVector(vector<JRectangle*>* v){$/;"	f	class:JRectangle	typeref:typename:void
addVector	src/Event/JVorm.cpp	/^void JVorm::addVector(vector<JVorm*>* v){$/;"	f	class:JVorm	typeref:typename:void
addVector	src/Event/SpaceCube.cpp	/^void SpaceCube::addVector(vector<SpaceCube*>* v){$/;"	f	class:SpaceCube	typeref:typename:void
allBinsVisible	src/Event/JVideoPlayer.cpp	/^void JVideoPlayer::allBinsVisible(){$/;"	f	class:JVideoPlayer	typeref:typename:void
allRandomBrightness	src/Event/JVideoPlayer.cpp	/^void JVideoPlayer::allRandomBrightness(int min, int max){$/;"	f	class:JVideoPlayer	typeref:typename:void
allocate	src/Event/JPPBuffer.h	/^    void allocate( int _width, int _height, int _internalformat = GL_RGBA32F){$/;"	f	struct:pingPongBuffer	typeref:typename:void
alpha	src/Event/particleSystemOpenCL.cpp	/^    float alpha;        \/\/ need this to make sure the float2 vel is aligned to a 16 byte bound/;"	m	struct:__anon240f87380108	typeref:typename:float	file:
alphaDecay	src/Event/JPhysarum.hpp	/^    ofShader    alphaDecay;$/;"	m	class:JPhysarum	typeref:typename:ofShader
alphaScreen	src/ofxJVisuals.hpp	/^  AlphaBlackScreen *alphaScreen = nullptr;$/;"	m	class:ofxJVisuals	typeref:typename:AlphaBlackScreen *
amplitude	src/Event/JLine.hpp	/^    int amplitude = 0;$/;"	m	class:JLine	typeref:typename:int
android/armeabi	addon_config.mk	/^android\/armeabi:$/;"	t
android/armeabi-v7a	addon_config.mk	/^android\/armeabi-v7a:$/;"	t
angle	src/Event/JMirror.h	/^    int angle = 0;$/;"	m	class:JMirror	typeref:typename:int
angle	src/Event/JVorm.h	/^    float radius, angle, angleOffset;$/;"	m	class:JVorm	typeref:typename:float
angleOffset	src/Event/JVorm.h	/^    float radius, angle, angleOffset;$/;"	m	class:JVorm	typeref:typename:float
asOfRectangle	src/Event/JRectangle.cpp	/^ofRectangle JRectangle::asOfRectangle(){$/;"	f	class:JRectangle	typeref:typename:ofRectangle
asciiCharacters	src/Event/JVideoPlayer.hpp	/^    string asciiCharacters;$/;"	m	class:JVideoPlayer	typeref:typename:string
at	src/Event/JEvent.hpp	/^  JEvent &at(int num) {$/;"	f	class:JEvent	typeref:typename:JEvent &
avenir30	src/ofxJVisuals.hpp	/^  ofTrueTypeFont avenir30;$/;"	m	class:ofxJVisuals	typeref:typename:ofTrueTypeFont
avenir300	src/ofxJVisuals.hpp	/^  ofTrueTypeFont avenir300;$/;"	m	class:ofxJVisuals	typeref:typename:ofTrueTypeFont
axis	src/Event/dotsBlob.hpp	/^    ofVec3f axis = ofVec3f(1, 0, 0);$/;"	m	struct:dotsCircle	typeref:typename:ofVec3f
bActive	src/Wavetable.h	/^    bool bActive = true;$/;"	m	class:Wavetable	typeref:typename:bool
bAddMirror	src/ofxJVisuals.hpp	/^  bool bAddMirror = false;$/;"	m	class:ofxJVisuals	typeref:typename:bool
bBlock	src/Event/JDivisionGrid.hpp	/^    bool bBlock = false; \/\/ Means it can't be split$/;"	m	class:JPoly	typeref:typename:bool
bCam	src/ofxJVisuals.hpp	/^  bool bCam = true;$/;"	m	class:ofxJVisuals	typeref:typename:bool
bCamEnabled	src/Event/JText.hpp	/^    bool bCamEnabled = false;$/;"	m	class:JText	typeref:typename:bool
bCenterPulse	src/Event/MultiMesh.hpp	/^    bool bCenterPulse = true;$/;"	m	class:MultiMesh	typeref:typename:bool
bCenterPulse	src/Event/MultiMeshMaybeTomorrow.hpp	/^    bool bCenterPulse = true;$/;"	m	class:MultiMeshMaybeTomorrow	typeref:typename:bool
bCheckBordersH	src/Event/JEvent.hpp	/^  bool bCheckBordersH = true;$/;"	m	class:JEvent	typeref:typename:bool
bCheckBordersV	src/Event/JEvent.hpp	/^  bool bCheckBordersV = true;$/;"	m	class:JEvent	typeref:typename:bool
bDilate	src/Event/JVideoPlayer.hpp	/^    bool bDilate = false;$/;"	m	class:Bin	typeref:typename:bool
bDisplay	src/Event/JVideoPlayer.hpp	/^    bool bDisplay = true;$/;"	m	class:Bin	typeref:typename:bool
bDisplayFaces	src/Event/meshLandscape.hpp	/^    bool bDisplayFaces = false;$/;"	m	class:meshLandscape	typeref:typename:bool
bDisplayMirror	src/Event/JMirror.h	/^    bool bDisplayMirror = true;$/;"	m	class:JMirror	typeref:typename:bool
bDisplayRange	src/Event/dotsBlob.hpp	/^    bool bDisplayRange = true;$/;"	m	class:dotsBlob	typeref:typename:bool
bDisplayWireFrame	src/Event/meshLandscape.hpp	/^    bool bDisplayWireFrame = false;$/;"	m	class:meshLandscape	typeref:typename:bool
bDoAlphaBlend	src/AlphaBlackScreen.hpp	/^    bool bDoAlphaBlend = false;$/;"	m	class:AlphaBlackScreen	typeref:typename:bool
bDoOnce	src/scSynth.hpp	/^    bool bDoOnce = false;$/;"	m	class:scSynth	typeref:typename:bool
bDone	src/Env.hpp	/^    bool bDone = false;$/;"	m	class:Env	typeref:typename:bool
bDrawCirclularMask	src/ofxJVisuals.hpp	/^  bool bDrawCirclularMask = false;$/;"	m	class:ofxJVisuals	typeref:typename:bool
bDrawColors	src/Event/JVecField.hpp	/^    bool bDrawColors = false;$/;"	m	class:JVecField	typeref:typename:bool
bDrawGui	src/Event/JPhysarum.hpp	/^    bool bDrawGui = true;$/;"	m	class:JPhysarum	typeref:typename:bool
bDrawLines	src/Event/JVorm.h	/^    bool bDrawLines = false;$/;"	m	class:JVorm	typeref:typename:bool
bDrawNegativeLayer	src/ofxJVisuals.hpp	/^  bool bDrawNegativeLayer = false;$/;"	m	class:ofxJVisuals	typeref:typename:bool
bDrawSphere	src/Event/dotsBlob.hpp	/^    bool bDrawSphere = false;$/;"	m	class:dotsBlob	typeref:typename:bool
bDrawWireframe	src/Event/JDivisionGrid.hpp	/^    bool bDrawWireframe = false;$/;"	m	class:JPoly	typeref:typename:bool
bEasingSet	src/Env.hpp	/^    bool bEasingSet = false;$/;"	m	class:Env	typeref:typename:bool
bEditMode	src/ofxJVisuals.hpp	/^  bool bEditMode = false;$/;"	m	class:ofxJVisuals	typeref:typename:bool
bEvolve	src/Event/JEvent.hpp	/^  bool bEvolve = false;$/;"	m	class:JEvent	typeref:typename:bool
bFadeIn	src/Event/MultiMesh.hpp	/^    bool bFadeIn = false;$/;"	m	class:MultiMesh	typeref:typename:bool
bFadeIn	src/Event/MultiMeshMaybeTomorrow.hpp	/^    Env* fadeInEnv; bool bFadeIn = false;$/;"	m	class:MultiMeshMaybeTomorrow	typeref:typename:bool
bFadeOut	src/Event/MultiMesh.hpp	/^    bool bFadeOut = false;$/;"	m	class:MultiMesh	typeref:typename:bool
bFadeOut	src/Event/MultiMeshMaybeTomorrow.hpp	/^    Env* fadeOutEnv; bool bFadeOut = false;$/;"	m	class:MultiMeshMaybeTomorrow	typeref:typename:bool
bFill	src/Event/JEventBase.hpp	/^  float bFill = true;$/;"	m	class:JEventBase	typeref:typename:float
bGradient	src/AlphaBlackScreen.hpp	/^    bool bGradient = false;$/;"	m	class:AlphaBlackScreen	typeref:typename:bool
bGray	src/Event/JVideoPlayer.hpp	/^    bool bGray = false;$/;"	m	class:Bin	typeref:typename:bool
bGrowRadius	src/Event/MultiMesh.hpp	/^    void growRadius(int direction, float speed); bool bGrowRadius=false;$/;"	m	class:MultiMesh	typeref:typename:bool
bGrowRadius	src/Event/MultiMeshMaybeTomorrow.hpp	/^    void growRadius(int direction, float speed); bool bGrowRadius=false;$/;"	m	class:MultiMeshMaybeTomorrow	typeref:typename:bool
bHasEnv	src/Event/JDivisionGrid.hpp	/^    bool bHasEnv = false;$/;"	m	class:JPoly	typeref:typename:bool
bIsNotified	src/MsgParser.hpp	/^    bool bIsNotified = false;$/;"	m	class:MsgParser	typeref:typename:bool
bLoadSucces	src/Event/JImage.hpp	/^    bool bLoadSucces = false;$/;"	m	class:JImage	typeref:typename:bool
bMask	src/ofxJVisuals.hpp	/^  bool bMask = false;$/;"	m	class:ofxJVisuals	typeref:typename:bool
bMirror	src/ofxJVisuals.hpp	/^  bool bMirror = false;$/;"	m	class:ofxJVisuals	typeref:typename:bool
bMirrorH	src/Event/JVideoPlayer.hpp	/^    bool bMirrorH = false; bool bMirrorV = false;$/;"	m	class:Bin	typeref:typename:bool
bMirrorMouse	src/Event/particleSystemOpenCL.hpp	/^    bool bMirrorMouse = false;$/;"	m	class:particleSystem	typeref:typename:bool
bMirrorV	src/Event/JVideoPlayer.hpp	/^    bool bMirrorH = false; bool bMirrorV = false;$/;"	m	class:Bin	typeref:typename:bool
bMorph	src/Event/MultiMesh.hpp	/^    void morph(); bool bMorph = false; void doMorph(float angle, float time); float morphAngle, /;"	m	class:MultiMesh	typeref:typename:bool
bMorph	src/Event/MultiMeshMaybeTomorrow.hpp	/^    void morph(); bool bMorph = false; void doMorph(float angle, float time); float morphAngle, /;"	m	class:MultiMeshMaybeTomorrow	typeref:typename:bool
bMove	src/Event/JEventBase.hpp	/^  float bMove = true;$/;"	m	class:JEventBase	typeref:typename:float
bMoveHorizontal	src/Event/MultiMesh.hpp	/^    bool bMoveHorizontal = false; void moveHorizontal();$/;"	m	class:MultiMesh	typeref:typename:bool
bMoveHorizontal	src/Event/MultiMeshMaybeTomorrow.hpp	/^    bool bMoveHorizontal = false; void moveHorizontal();$/;"	m	class:MultiMeshMaybeTomorrow	typeref:typename:bool
bMoveOutVertext	src/Event/MultiMeshMaybeTomorrow.hpp	/^    void moveOutVertex(int index); bool bMoveOutVertext = false;$/;"	m	class:MultiMeshMaybeTomorrow	typeref:typename:bool
bMoveVertical	src/Event/MultiMeshMaybeTomorrow.hpp	/^    bool bMoveVertical = false; void moveVertical();$/;"	m	class:MultiMeshMaybeTomorrow	typeref:typename:bool
bMoveWithPulse	src/Event/MultiMeshMaybeTomorrow.hpp	/^    bool bMoveWithPulse = false; void moveWithPulse(); Wavetable* pulseOsc;$/;"	m	class:MultiMeshMaybeTomorrow	typeref:typename:bool
bNormalize	src/Event/JVecField.hpp	/^    bool bNormalize = true;$/;"	m	class:JVecField	typeref:typename:bool
bOnlyLines	src/Event/dotsBlob.hpp	/^    bool bOnlyLines = false;$/;"	m	class:dotsBlob	typeref:typename:bool
bPostProcessing	src/ofxJVisuals.hpp	/^  bool bPostProcessing = false;$/;"	m	class:ofxJVisuals	typeref:typename:bool
bRotate	src/ofxJVisuals.hpp	/^  bool bRotate = false;$/;"	m	class:ofxJVisuals	typeref:typename:bool
bSave	src/Env.hpp	/^    bool bSave = false;$/;"	m	class:Env	typeref:typename:bool
bSave	src/Event/JDivisionGrid.hpp	/^    bool bSave = false;$/;"	m	class:JDivisionGrid	typeref:typename:bool
bSave	src/Event/JMesh.hpp	/^    bool bSave = false;$/;"	m	class:JMesh	typeref:typename:bool
bSwitch	src/Event/JVideoPlayer.hpp	/^    bool bSwitch = false;$/;"	m	class:Bin	typeref:typename:bool
bUseNormalImage	src/Event/meshLandscape.hpp	/^    bool bUseNormalImage = false;$/;"	m	class:meshLandscape	typeref:typename:bool
bUseSC	src/MsgParser.hpp	/^    bool bUseSC = false;$/;"	m	class:MsgParser	typeref:typename:bool
balance	src/Event/JLine.hpp	/^    float balance = 0.5;$/;"	m	class:JLine	typeref:typename:float
balance	src/Event/JPhysarum.hpp	/^    float balance = 0.5;$/;"	m	class:JPhysarum	typeref:typename:float
begin	src/JShader.cpp	/^void JShader::begin() {$/;"	f	class:JShader	typeref:typename:void
binWidth	src/Event/JVideoPlayer.hpp	/^    int binWidth;$/;"	m	class:Bin	typeref:typename:int
bins	src/Event/JVideoPlayer.hpp	/^    vector<Bin*> bins;$/;"	m	class:JVideoPlayer	typeref:typename:vector<Bin * >
blink	src/Event/SpaceCube.cpp	/^void SpaceCube::blink(){$/;"	f	class:SpaceCube	typeref:typename:void
blobs	src/Event/dotsBlob.hpp	/^    vector<dotsBlob*>* blobs;$/;"	m	class:dotsBlob	typeref:typename:vector<dotsBlob * > *
blurMix	src/Event/JPhysarum.hpp	/^    float blurMix;$/;"	m	class:JPhysarum	typeref:typename:float
boomSpeed	src/cameraController.hpp	/^    float boomSpeed = 0;$/;"	m	class:cameraController	typeref:typename:float
bpm	src/Event/MultiMesh.hpp	/^    int bpm = 120;$/;"	m	class:MultiMesh	typeref:typename:int
bpm	src/Event/MultiMeshMaybeTomorrow.hpp	/^    int bpm = 120;$/;"	m	class:MultiMeshMaybeTomorrow	typeref:typename:int
brightness	src/Event/JVideoPlayer.hpp	/^    int brightness = 255;$/;"	m	class:Bin	typeref:typename:int
brightness	src/ofxJVisuals.hpp	/^  int brightness = 255;$/;"	m	class:ofxJVisuals	typeref:typename:int
brightnessAndSaturation	src/ofxJVisuals.hpp	/^  ofShader brightnessAndSaturation;$/;"	m	class:ofxJVisuals	typeref:typename:ofShader
buffer	src/Event/JEvent.hpp	/^  vector<float> buffer; \/\/ For JLine$/;"	m	class:JEvent	typeref:typename:vector<float>
busses	src/Event/JEventBase.hpp	/^  float busses[10];$/;"	m	class:JEventBase	typeref:typename:float[10]
calcLine	src/Event/JLine.cpp	/^void JLine::calcLine(){$/;"	f	class:JLine	typeref:typename:void
calcPolyBlob	src/Event/dotsBlob.cpp	/^void dotsBlob::calcPolyBlob(){$/;"	f	class:dotsBlob	typeref:typename:void
calculateConnections	src/Event/dotsBlob.cpp	/^void dotsBlob::calculateConnections(){$/;"	f	class:dotsBlob	typeref:typename:void
cam	src/cameraController.hpp	/^    ofEasyCam* cam;$/;"	m	class:cameraController	typeref:typename:ofEasyCam *
cam	src/ofxJVisuals.hpp	/^  ofEasyCam cam;$/;"	m	class:ofxJVisuals	typeref:typename:ofEasyCam
camController	src/ofxJVisuals.hpp	/^  cameraController *camController;$/;"	m	class:ofxJVisuals	typeref:typename:cameraController *
cameraController	src/cameraController.cpp	/^cameraController::cameraController(ofEasyCam* c){$/;"	f	class:cameraController
cameraController	src/cameraController.hpp	/^class cameraController: public JEvent{$/;"	c
cameraController_hpp	src/cameraController.hpp	/^#define cameraController_hpp$/;"	d
cbo	src/Event/particleSystemOpenCL.hpp	/^    GLuint vbo, cbo;$/;"	m	class:particleSystem	typeref:typename:GLuint
centerPulse	src/Event/MultiMesh.cpp	/^void MultiMesh::centerPulse(){$/;"	f	class:MultiMesh	typeref:typename:void
centerPulse	src/Event/MultiMeshMaybeTomorrow.cpp	/^void MultiMeshMaybeTomorrow::centerPulse(){$/;"	f	class:MultiMeshMaybeTomorrow	typeref:typename:void
centerPulseRadius	src/Event/MultiMesh.hpp	/^    int pulseMoveWidth; int centerPulseRadius = 50;$/;"	m	class:MultiMesh	typeref:typename:int
centerPulseRadius	src/Event/MultiMeshMaybeTomorrow.hpp	/^    int pulseMoveWidth; int centerPulseRadius = 50;$/;"	m	class:MultiMeshMaybeTomorrow	typeref:typename:int
changeAngleOffset	src/Event/JVorm.cpp	/^void JVorm::changeAngleOffset(float angle_){$/;"	f	class:JVorm	typeref:typename:void
changeColor	src/Event/MultiMesh.cpp	/^void MultiMesh::changeColor(ofFloatColor color){$/;"	f	class:MultiMesh	typeref:typename:void
changeColor	src/Event/MultiMeshMaybeTomorrow.cpp	/^void MultiMeshMaybeTomorrow::changeColor(ofFloatColor color){$/;"	f	class:MultiMeshMaybeTomorrow	typeref:typename:void
changeLocations	src/Event/MultiMesh.cpp	/^void MultiMesh::changeLocations(){$/;"	f	class:MultiMesh	typeref:typename:void
changeLocations	src/Event/MultiMeshMaybeTomorrow.cpp	/^void MultiMeshMaybeTomorrow::changeLocations(){$/;"	f	class:MultiMeshMaybeTomorrow	typeref:typename:void
changeMaxspeed	src/Event/JVorm.cpp	/^void JVorm::changeMaxspeed(float maxspeed_){$/;"	f	class:JVorm	typeref:typename:void
changeMaxspeed	src/Event/JVorm.cpp	/^void JVorm::changeMaxspeed(float minspeed_, float maxspeed_){$/;"	f	class:JVorm	typeref:typename:void
changeMode	src/Event/JParticle.cpp	/^void JParticle::changeMode(){$/;"	f	class:JParticle	typeref:typename:void
changeMode	src/Event/MultiMesh.cpp	/^void MultiMesh::changeMode(ofPrimitiveMode mode){$/;"	f	class:MultiMesh	typeref:typename:void
changeMode	src/Event/MultiMeshMaybeTomorrow.cpp	/^void MultiMeshMaybeTomorrow::changeMode(ofPrimitiveMode mode){$/;"	f	class:MultiMeshMaybeTomorrow	typeref:typename:void
changeRadius	src/Event/JVorm.cpp	/^void JVorm::changeRadius(float radius_){ \/\/ Could be improved by only adding radius increaseme/;"	f	class:JVorm	typeref:typename:void
changeStateOfParticles	src/Event/JVorm.cpp	/^void JVorm::changeStateOfParticles(bool state){$/;"	f	class:JVorm	typeref:typename:void
checkBorders	src/Event/JEvent.cpp	/^void JEvent::checkBorders(){$/;"	f	class:JEvent	typeref:typename:void
checkBorders	src/Event/JPrimitive.hpp	/^    void checkBorders() override {$/;"	f	class:JCircle	typeref:typename:void
checkIfConnected	src/Event/JParticle.cpp	/^bool JParticle::checkIfConnected(JParticle* p){$/;"	f	class:JParticle	typeref:typename:bool
checkIfEnvExists	src/Event/JEvent.cpp	/^bool JEvent::checkIfEnvExists(char id){$/;"	f	class:JEvent	typeref:typename:bool
checkIfInFormation	src/Event/JVorm.cpp	/^bool JVorm::checkIfInFormation(){$/;"	f	class:JVorm	typeref:typename:bool
checkIfNull	src/Event/RectangleMask.cpp	/^bool RectangleMask::checkIfNull(JRectangle* r){$/;"	f	class:RectangleMask	typeref:typename:bool
checkIfNull	src/Event/SpaceCube.cpp	/^bool SpaceCube::checkIfNull(SpaceCube* s){$/;"	f	class:SpaceCube	typeref:typename:bool
checkIfNull	src/ofxJVisuals.cpp	/^bool ofxJVisuals::checkIfNull(JEvent *e) { return (bool)e; }$/;"	f	class:ofxJVisuals	typeref:typename:bool
children	src/Event/JRectangle.hpp	/^    vector<JRectangle*> children;$/;"	m	class:JRectangle	typeref:typename:vector<JRectangle * >
chooseTwoRandomBins	src/Event/JVideoPlayer.cpp	/^vector<int> JVideoPlayer::chooseTwoRandomBins(){$/;"	f	class:JVideoPlayer	typeref:typename:vector<int>
circles	src/Event/dotsBlob.hpp	/^    vector<dotsCircle> circles;$/;"	m	class:dotsBlob	typeref:typename:vector<dotsCircle>
circularMask	src/ofxJVisuals.hpp	/^  ofFbo circularMask;$/;"	m	class:ofxJVisuals	typeref:typename:ofFbo
clImage	src/Event/particleSystemOpenCL.hpp	/^    msa::OpenCLImage clImage;$/;"	m	class:particleSystem	typeref:typename:msa::OpenCLImage
clear	src/Event/JPPBuffer.h	/^    void clear(){$/;"	f	struct:pingPongBuffer	typeref:typename:void
clearEnv	src/Event/JEvent.cpp	/^void JEvent::clearEnv(){$/;"	f	class:JEvent	typeref:typename:void
color	src/Event/JEventBase.hpp	/^  ofColor color; \/\/ There's a SC-version!!!$/;"	m	class:JEventBase	typeref:typename:ofColor
color	src/Event/particleSystemOpenCL.hpp	/^    ofFloatColor color = ofFloatColor(1.0, 1.0, 1.0, 0.05);$/;"	m	class:particleSystem	typeref:typename:ofFloatColor
colorAlphas	src/Event/MultiMesh.hpp	/^    float* colorAlphas;$/;"	m	class:MultiMesh	typeref:typename:float *
colorAlphas	src/Event/MultiMeshMaybeTomorrow.hpp	/^    float* colorAlphas;$/;"	m	class:MultiMeshMaybeTomorrow	typeref:typename:float *
colorPtr	src/mapValue.h	/^    ofColor* colorPtr;$/;"	m	class:mapValue	typeref:typename:ofColor *
colors	src/Event/dotsBlob.hpp	/^    vector<ofColor> colors;$/;"	m	class:dotsBlob	typeref:typename:vector<ofColor>
commands	src/MsgParser.hpp	/^    map<string, short> commands;$/;"	m	class:MsgParser	typeref:typename:map<string,short>
common	addon_config.mk	/^common:$/;"	t
complexity	src/Event/JVecField.hpp	/^    float complexity = 20; \/\/ wind complexity$/;"	m	class:JVecField	typeref:typename:float
config_h	src/config.h	/^#define config_h$/;"	d
connect	src/MsgParser.cpp	/^bool MsgParser::connect(ofxOscMessage &m) {$/;"	f	class:MsgParser	typeref:typename:bool
connectParticle	src/Event/JParticle.cpp	/^void JParticle::connectParticle(JParticle* p){$/;"	f	class:JParticle	typeref:typename:void
connectParticles	src/Event/JVorm.cpp	/^void JVorm::connectParticles(){$/;"	f	class:JVorm	typeref:typename:void
connectToSuperCollider	src/MsgParser.cpp	/^void MsgParser::connectToSuperCollider() {$/;"	f	class:MsgParser	typeref:typename:void
connectWith	src/Event/JVorm.cpp	/^void JVorm::connectWith(){$/;"	f	class:JVorm	typeref:typename:void
connectable	src/Event/JParticle.h	/^    bool connectable = true;$/;"	m	class:JParticle	typeref:typename:bool
connected	src/Event/JVorm.h	/^        bool connected = false;$/;"	m	class:JVorm::connection	typeref:typename:bool
connectedParticles	src/Event/JParticle.h	/^    vector<JParticle*> connectedParticles;$/;"	m	class:JParticle	typeref:typename:vector<JParticle * >
connection	src/Event/JVorm.h	/^        connection(){$/;"	f	class:JVorm::connection
connection	src/Event/JVorm.h	/^    class connection{$/;"	c	class:JVorm
connectionL	src/Event/dotsBlob.hpp	/^    ofPolyline* connectionL = nullptr;$/;"	m	class:dotsBlob	typeref:typename:ofPolyline *
connectionPointers	src/Event/JVorm.h	/^    vector<JVorm*>* connectionPointers = nullptr; \/\/ Zou ook nog in een vector van pointers na/;"	m	class:JVorm	typeref:typename:vector<JVorm * > *
connectionR	src/Event/dotsBlob.hpp	/^    ofPolyline* connectionR = nullptr;$/;"	m	class:dotsBlob	typeref:typename:ofPolyline *
connections	src/Event/JVorm.h	/^    vector<connection> connections;$/;"	m	class:JVorm	typeref:typename:vector<connection>
connections	src/Event/dotsBlob.hpp	/^    vector<dotsBlob*> connections;$/;"	m	class:dotsBlob	typeref:typename:vector<dotsBlob * >
contrastPP	src/ofxJVisuals.hpp	/^  ContrastPass::Ptr contrastPP = nullptr;$/;"	m	class:ofxJVisuals	typeref:typename:ContrastPass::Ptr
convertRectToMesh	src/Event/JThickLine.hpp	/^  void convertRectToMesh(ofRectangle r, float lineWidth){$/;"	f	class:JThickLine	typeref:typename:void
convertToSphere	src/Event/SpaceCube.cpp	/^void SpaceCube::convertToSphere(float radius){$/;"	f	class:SpaceCube	typeref:typename:void
convert_to_sphere	src/Event/SpaceCube.h	/^    bool convert_to_sphere;$/;"	m	class:SpaceCube	typeref:typename:bool
coordinates	src/Event/JVorm.h	/^    vector<glm::vec3> coordinates;$/;"	m	class:JVorm	typeref:typename:vector<glm::vec3>
copyVecFieldToCLImage	src/Event/particleSystemOpenCL.cpp	/^bool particleSystem::copyVecFieldToCLImage(){$/;"	f	class:particleSystem	typeref:typename:bool
create	src/MsgParser.cpp	/^bool MsgParser::create(ofxOscMessage &m) {$/;"	f	class:MsgParser	typeref:typename:bool
create	src/modifiers/JModifierFact.hpp	/^    static JModifier* create(int nameID){$/;"	f	class:JModifierFact	typeref:typename:JModifier *
createHollowRect	src/Event/JMesh.cpp	/^void JMesh::createHollowRect(glm::vec3 dimensions, float width){$/;"	f	class:JMesh	typeref:typename:void
curve	src/Env.hpp	/^    char curve = 0;$/;"	m	class:Env	typeref:typename:char
curveType	src/Env.hpp	/^    ofxeasing::function curveType;$/;"	m	class:Env	typeref:typename:ofxeasing::function
customFive	src/Event/JEvent.hpp	/^  virtual void customFive(float *v = nullptr){};$/;"	f	class:JEvent	typeref:typename:void
customFive	src/Event/JVorm.cpp	/^void JVorm::customFive(float* v){$/;"	f	class:JVorm	typeref:typename:void
customFive	src/Event/MultiMesh.cpp	/^void MultiMesh::customFive(float* v){$/;"	f	class:MultiMesh	typeref:typename:void
customFive	src/Event/SpaceCube.cpp	/^void SpaceCube::customFive(float* v){ \/\/ Resize$/;"	f	class:SpaceCube	typeref:typename:void
customFive	src/Event/particleSystemOpenCL.cpp	/^void particleSystem::customFive(float* v){$/;"	f	class:particleSystem	typeref:typename:void
customFour	src/Event/JDivisionGrid.cpp	/^void JDivisionGrid::customFour(float* v){$/;"	f	class:JDivisionGrid	typeref:typename:void
customFour	src/Event/JEvent.hpp	/^  virtual void customFour(float *v = nullptr){};$/;"	f	class:JEvent	typeref:typename:void
customFour	src/Event/JVorm.cpp	/^void JVorm::customFour(float* v){}$/;"	f	class:JVorm	typeref:typename:void
customFour	src/Event/MultiMesh.cpp	/^void MultiMesh::customFour(float* v){$/;"	f	class:MultiMesh	typeref:typename:void
customFour	src/Event/SpaceCube.cpp	/^void SpaceCube::customFour(float* v){$/;"	f	class:SpaceCube	typeref:typename:void
customFour	src/Event/particleSystemOpenCL.cpp	/^void particleSystem::customFour(float* v){ \/\/ Set alpha$/;"	f	class:particleSystem	typeref:typename:void
customLess	src/Event/JEvent.hpp	/^  } customLess;$/;"	m	class:JEvent	typeref:struct:JEvent::__anonb680d16f0108
customOne	src/Event/JDivisionGrid.cpp	/^void JDivisionGrid::customOne(float* v){$/;"	f	class:JDivisionGrid	typeref:typename:void
customOne	src/Event/JEvent.hpp	/^  virtual void customOne(float *v = nullptr){};$/;"	f	class:JEvent	typeref:typename:void
customOne	src/Event/JLine.cpp	/^void JLine::customOne(float* v){fromBuffer(0);}$/;"	f	class:JLine	typeref:typename:void
customOne	src/Event/JMesh.cpp	/^void JMesh::customOne(float* v){$/;"	f	class:JMesh	typeref:typename:void
customOne	src/Event/JNoise.cpp	/^void JNoise::customOne(float* v){$/;"	f	class:JNoise	typeref:typename:void
customOne	src/Event/JShaderTest.cpp	/^void JShaderTest::customOne(float* v){$/;"	f	class:JShaderTest	typeref:typename:void
customOne	src/Event/JVideoPlayer.cpp	/^void JVideoPlayer::customOne(float* v){load(path);}$/;"	f	class:JVideoPlayer	typeref:typename:void
customOne	src/Event/JVorm.cpp	/^void JVorm::customOne(float* values){$/;"	f	class:JVorm	typeref:typename:void
customOne	src/Event/MultiMesh.cpp	/^void MultiMesh::customOne(float* v){$/;"	f	class:MultiMesh	typeref:typename:void
customOne	src/Event/SpaceCube.cpp	/^void SpaceCube::customOne(float* v){$/;"	f	class:SpaceCube	typeref:typename:void
customOne	src/Event/particleSystemOpenCL.cpp	/^void particleSystem::customOne(float* v){$/;"	f	class:particleSystem	typeref:typename:void
customThree	src/Event/JDivisionGrid.cpp	/^void JDivisionGrid::customThree(float* v){$/;"	f	class:JDivisionGrid	typeref:typename:void
customThree	src/Event/JEvent.hpp	/^  virtual void customThree(float *v = nullptr){};$/;"	f	class:JEvent	typeref:typename:void
customThree	src/Event/JLine.cpp	/^void JLine::customThree(float* v){fromBuffer(2);}$/;"	f	class:JLine	typeref:typename:void
customThree	src/Event/JMesh.cpp	/^void JMesh::customThree(float* v){$/;"	f	class:JMesh	typeref:typename:void
customThree	src/Event/JVorm.cpp	/^void JVorm::customThree(float* v){}$/;"	f	class:JVorm	typeref:typename:void
customThree	src/Event/MultiMesh.cpp	/^void MultiMesh::customThree(float* v){$/;"	f	class:MultiMesh	typeref:typename:void
customThree	src/Event/SpaceCube.cpp	/^void SpaceCube::customThree(float* v){$/;"	f	class:SpaceCube	typeref:typename:void
customThree	src/Event/particleSystemOpenCL.cpp	/^void particleSystem::customThree(float* v){ \/\/ Set traagheid$/;"	f	class:particleSystem	typeref:typename:void
customTwo	src/Event/JDivisionGrid.cpp	/^void JDivisionGrid::customTwo(float* v){$/;"	f	class:JDivisionGrid	typeref:typename:void
customTwo	src/Event/JEvent.hpp	/^  virtual void customTwo(float *v = nullptr){};$/;"	f	class:JEvent	typeref:typename:void
customTwo	src/Event/JLine.cpp	/^void JLine::customTwo(float* v){fromBuffer(1);}$/;"	f	class:JLine	typeref:typename:void
customTwo	src/Event/JMesh.cpp	/^void JMesh::customTwo(float* v){$/;"	f	class:JMesh	typeref:typename:void
customTwo	src/Event/JVideoPlayer.cpp	/^void JVideoPlayer::customTwo(float* v){$/;"	f	class:JVideoPlayer	typeref:typename:void
customTwo	src/Event/JVorm.cpp	/^void JVorm::customTwo(float* v){$/;"	f	class:JVorm	typeref:typename:void
customTwo	src/Event/MultiMesh.cpp	/^void MultiMesh::customTwo(float* v){$/;"	f	class:MultiMesh	typeref:typename:void
customTwo	src/Event/SpaceCube.cpp	/^void SpaceCube::customTwo(float* v){$/;"	f	class:SpaceCube	typeref:typename:void
customTwo	src/Event/particleSystemOpenCL.cpp	/^void particleSystem::customTwo(float* v){$/;"	f	class:particleSystem	typeref:typename:void
customTwoArguments	src/Event/JEvent.hpp	/^  float customTwoArguments[5];$/;"	m	class:JEvent	typeref:typename:float[5]
decay	src/Event/JPhysarum.hpp	/^    float decay = 0.98;$/;"	m	class:JPhysarum	typeref:typename:float
deconstructor	src/ofxJVisuals.cpp	/^void ofxJVisuals::deconstructor() { delete this; }$/;"	f	class:ofxJVisuals	typeref:typename:void
defs1758	exampleSimple/bin/data/test_0.svg	/^     id="defs1758" \/>$/;"	i
deleteModifiers	src/modifiers/JModifier.cpp	/^void JEvent::deleteModifiers(){$/;"	f	class:JEvent	typeref:typename:void
deleteNext	src/Event/JEvent.cpp	/^void JEvent::deleteNext(){$/;"	f	class:JEvent	typeref:typename:void
deleteWithFade	src/Event/JEvent.cpp	/^void JEvent::deleteWithFade(short int releaseTime){$/;"	f	class:JEvent	typeref:typename:void
deleteWithFade	src/Event/MultiMesh.cpp	/^void MultiMesh::deleteWithFade(int releaseTime){$/;"	f	class:MultiMesh	typeref:typename:void
deleteWithFade	src/Event/MultiMeshMaybeTomorrow.cpp	/^void MultiMeshMaybeTomorrow::deleteWithFade(int releaseTime, int attackTime){$/;"	f	class:MultiMeshMaybeTomorrow	typeref:typename:void
density	src/Event/JVecField.hpp	/^    glm::vec2 density = glm::vec2(40, 40);$/;"	m	class:JVecField	typeref:typename:glm::vec2
depositAmount	src/Event/JPhysarum.hpp	/^    float depositAmount = 60;$/;"	m	class:JPhysarum	typeref:typename:float
destAlpha	src/Event/particleSystemOpenCL.hpp	/^    float destAlpha = 0.4;$/;"	m	class:particleSystem	typeref:typename:float
destination	src/Event/JParticle.h	/^    glm::vec3* destination;$/;"	m	class:JParticle	typeref:typename:glm::vec3 *
diagonalPow	src/JShaderLines.hpp	/^    float diagonalPow = 1.8;$/;"	m	class:JShaderLines	typeref:typename:float
diagonalScale	src/JShaderLines.hpp	/^    float diagonalScale = 18.0;$/;"	m	class:JShaderLines	typeref:typename:float
dilateFactor	src/Event/JVideoPlayer.hpp	/^    int dilateFactor = 4;$/;"	m	class:Bin	typeref:typename:int
dimensions	src/Event/particleSystemOpenCL.hpp	/^    float2 dimensions;$/;"	m	class:particleSystem	typeref:typename:float2
dimensions	src/modifiers/JModifierArray.hpp	/^    float* dimensions[2];$/;"	m	class:JModifierArray	typeref:typename:float * [2]
dir	src/Event/JDivisionGrid.hpp	/^    glm::vec3 dir;$/;"	m	class:JPoly	typeref:typename:glm::vec3
dir	src/Event/dotsBlob.hpp	/^    ofVec3f dir;$/;"	m	class:dotsBlob	typeref:typename:ofVec3f
direction	src/Env.hpp	/^    bool direction = 1;$/;"	m	class:Env	typeref:typename:bool
direction	src/Event/JDivisionGrid.hpp	/^    glm::vec3 direction;$/;"	m	class:JPoly	typeref:typename:glm::vec3
direction	src/Event/JEventBase.hpp	/^  glm::vec3 direction = {1, 0, 0};$/;"	m	class:JEventBase	typeref:typename:glm::vec3
disableOddBins	src/Event/JVideoPlayer.cpp	/^void JVideoPlayer::disableOddBins(){$/;"	f	class:JVideoPlayer	typeref:typename:void
disableVerticalMirror	src/Event/JVideoPlayer.cpp	/^void JVideoPlayer::disableVerticalMirror(){$/;"	f	class:JVideoPlayer	typeref:typename:void
display	src/AlphaBlackScreen.cpp	/^void AlphaBlackScreen::display(){$/;"	f	class:AlphaBlackScreen	typeref:typename:void
display	src/Event/JDivisionGrid.cpp	/^void JDivisionGrid::display(){$/;"	f	class:JDivisionGrid	typeref:typename:void
display	src/Event/JDivisionGrid.hpp	/^    void display() override{$/;"	f	class:JPoly	typeref:typename:void
display	src/Event/JEvent.hpp	/^  virtual void display(){};$/;"	f	class:JEvent	typeref:typename:void
display	src/Event/JImage.cpp	/^void JImage::display(){$/;"	f	class:JImage	typeref:typename:void
display	src/Event/JImage.hpp	/^  void display(){$/;"	f	class:JSvg	typeref:typename:void
display	src/Event/JLine.cpp	/^void JLine::display(){$/;"	f	class:JLine	typeref:typename:void
display	src/Event/JMesh.cpp	/^void JMesh::display(){$/;"	f	class:JMesh	typeref:typename:void
display	src/Event/JMirror.cpp	/^void JMirror::display(){$/;"	f	class:JMirror	typeref:typename:void
display	src/Event/JNoise.cpp	/^void JNoise::display(){$/;"	f	class:JNoise	typeref:typename:void
display	src/Event/JParticle.cpp	/^void JParticle::display(){$/;"	f	class:JParticle	typeref:typename:void
display	src/Event/JPhysarum.cpp	/^void JPhysarum::display(){$/;"	f	class:JPhysarum	typeref:typename:void
display	src/Event/JPrimitive.hpp	/^    virtual void display() override{$/;"	f	class:JCircle	typeref:typename:void
display	src/Event/JPrimitive.hpp	/^    virtual void display(){};$/;"	f	class:JPrimitive	typeref:typename:void
display	src/Event/JRectangle.cpp	/^void JRectangle::display(){$/;"	f	class:JRectangle	typeref:typename:void
display	src/Event/JShaderTest.cpp	/^void JShaderTest::display(){$/;"	f	class:JShaderTest	typeref:typename:void
display	src/Event/JText.cpp	/^void JText::display(){$/;"	f	class:JText	typeref:typename:void
display	src/Event/JVecField.cpp	/^void JVecField::display(){$/;"	f	class:JVecField	typeref:typename:void
display	src/Event/JVideoPlayer.cpp	/^void Bin::display(){$/;"	f	class:Bin	typeref:typename:void
display	src/Event/JVideoPlayer.cpp	/^void JVideoPlayer::display(){$/;"	f	class:JVideoPlayer	typeref:typename:void
display	src/Event/JVorm.cpp	/^void JVorm::display(){$/;"	f	class:JVorm	typeref:typename:void
display	src/Event/JWaveform.cpp	/^void JWaveform::display(){$/;"	f	class:JWaveform	typeref:typename:void
display	src/Event/MultiMesh.cpp	/^void MultiMesh::display(){$/;"	f	class:MultiMesh	typeref:typename:void
display	src/Event/MultiMeshMaybeTomorrow.cpp	/^void MultiMeshMaybeTomorrow::display(){$/;"	f	class:MultiMeshMaybeTomorrow	typeref:typename:void
display	src/Event/RectangleMask.cpp	/^void RectangleMask::display(){$/;"	f	class:RectangleMask	typeref:typename:void
display	src/Event/SpaceCube.cpp	/^void SpaceCube::display(){$/;"	f	class:SpaceCube	typeref:typename:void
display	src/Event/dotsBlob.cpp	/^void dotsBlob::display(){$/;"	f	class:dotsBlob	typeref:typename:void
display	src/Event/dotsBlob.hpp	/^    void display(){};$/;"	f	class:dotsConnectionLine	typeref:typename:void
display	src/Event/imageFloat.cpp	/^void imageFloater::display(){$/;"	f	class:imageFloater	typeref:typename:void
display	src/Event/meshLandscape.cpp	/^void meshLandscape::display(){$/;"	f	class:meshLandscape	typeref:typename:void
display	src/Event/particleSystem.cpp	/^void particleSystem::display(){$/;"	f	class:particleSystem	typeref:typename:void
display	src/Event/particleSystemOpenCL.cpp	/^void particleSystem::display(){$/;"	f	class:particleSystem	typeref:typename:void
display	src/modifiers/JModifier.cpp	/^void JModifier::display(JEvent* e, void (JEvent::*ptr) (void)){$/;"	f	class:JModifier	typeref:typename:void
display	src/modifiers/JModifierArray.hpp	/^    void display(JEvent* e, void (JEvent::*ptr) (void)){$/;"	f	class:JModifierArray	typeref:typename:void
display	src/modifiers/JModifierRedraw.hpp	/^    void display(JEvent* e, void (JEvent::*ptr) (void)){$/;"	f	class:JModifierRedraw	typeref:typename:void
display	src/ofxJVisuals.cpp	/^void ofxJVisuals::display() {$/;"	f	class:ofxJVisuals	typeref:typename:void
displayCut	src/Event/JVideoPlayer.cpp	/^void JVideoPlayer::displayCut(){$/;"	f	class:JVideoPlayer	typeref:typename:void
displayMain	src/Event/JEvent.cpp	/^void JEvent::displayMain(){$/;"	f	class:JEvent	typeref:typename:void
displayModifiers	src/modifiers/JModifier.cpp	/^void JEvent::displayModifiers(){$/;"	f	class:JEvent	typeref:typename:void
displayNormal	src/Event/JVideoPlayer.cpp	/^void JVideoPlayer::displayNormal(){$/;"	f	class:JVideoPlayer	typeref:typename:void
displayView	src/Event/JMirror.cpp	/^void JMirror::displayView(){$/;"	f	class:JMirror	typeref:typename:void
distances	src/Event/dotsBlob.hpp	/^    vector<float> distances;$/;"	m	class:dotsBlob	typeref:typename:vector<float>
divide	src/Event/JRectangle.cpp	/^void JRectangle::divide(){$/;"	f	class:JRectangle	typeref:typename:void
divisions	src/Event/JShaderTest.hpp	/^    ofVec2f divisions = ofVec2f(16, 16);$/;"	m	class:JShaderTest	typeref:typename:ofVec2f
doFade	src/Event/JVideoPlayer.cpp	/^void Bin::doFade(float a, float s, float r){$/;"	f	class:Bin	typeref:typename:void
doFunc	src/Event/JEvent.cpp	/^void JEvent::doFunc(int id, float* v){$/;"	f	class:JEvent	typeref:typename:void
doMorph	src/Event/MultiMesh.cpp	/^void MultiMesh::doMorph(float angle, float time){$/;"	f	class:MultiMesh	typeref:typename:void
doMorph	src/Event/MultiMeshMaybeTomorrow.cpp	/^void MultiMeshMaybeTomorrow::doMorph(float angle, float time){$/;"	f	class:MultiMeshMaybeTomorrow	typeref:typename:void
doSwitch	src/Event/JVideoPlayer.cpp	/^void Bin::doSwitch(int x){$/;"	f	class:Bin	typeref:typename:void
dollySpeed	src/cameraController.hpp	/^    float dollySpeed = 0;$/;"	m	class:cameraController	typeref:typename:float
dotsBlob	src/Event/dotsBlob.cpp	/^dotsBlob::dotsBlob(){$/;"	f	class:dotsBlob
dotsBlob	src/Event/dotsBlob.hpp	/^class dotsBlob: public JEvent{$/;"	c
dotsBlob_hpp	src/Event/dotsBlob.hpp	/^#define dotsBlob_hpp$/;"	d
dotsCircle	src/Event/dotsBlob.hpp	/^struct dotsCircle{$/;"	s
dotsConnectionLine	src/Event/dotsBlob.hpp	/^    dotsConnectionLine(){};$/;"	f	class:dotsConnectionLine
dotsConnectionLine	src/Event/dotsBlob.hpp	/^class dotsConnectionLine{$/;"	c
doubleTime	src/Event/MultiMeshMaybeTomorrow.cpp	/^void MultiMeshMaybeTomorrow::doubleTime(){$/;"	f	class:MultiMeshMaybeTomorrow	typeref:typename:void
dragEvent	exampleSimple/src/ofApp.cpp	/^void ofApp::dragEvent(ofDragInfo dragInfo) {}$/;"	f	class:ofApp	typeref:typename:void
dragEvent	exampleSimpleTlFix/src/ofApp.cpp	/^void ofApp::dragEvent(ofDragInfo dragInfo){$/;"	f	class:ofApp	typeref:typename:void
draw	exampleSimple/src/ofApp.cpp	/^void ofApp::draw() {$/;"	f	class:ofApp	typeref:typename:void
draw	exampleSimpleTlFix/src/ofApp.cpp	/^void ofApp::draw(){$/;"	f	class:ofApp	typeref:typename:void
drawCircles	src/Event/dotsBlob.cpp	/^void dotsBlob::drawCircles(ofColor c){$/;"	f	class:dotsBlob	typeref:typename:void
drawConnections	src/Event/dotsBlob.cpp	/^void dotsBlob::drawConnections(ofColor c){$/;"	f	class:dotsBlob	typeref:typename:void
drawLines	src/Event/JVorm.cpp	/^void JVorm::drawLines(JParticle *p1, JParticle *p2){$/;"	f	class:JVorm	typeref:typename:void
drawMask	src/ofxJVisuals.cpp	/^void ofxJVisuals::drawMask() {$/;"	f	class:ofxJVisuals	typeref:typename:void
drawMode	src/Event/JImage.hpp	/^    DrawMode drawMode = JImage::DrawMode::DEFAULT;$/;"	m	class:JImage	typeref:typename:DrawMode
drawMode	src/Event/JVecField.hpp	/^    char drawMode = VECFIELD_MODE::TEXTURE;$/;"	m	class:JVecField	typeref:typename:char
drawPolyBlob	src/Event/dotsBlob.cpp	/^void dotsBlob::drawPolyBlob(){$/;"	f	class:dotsBlob	typeref:typename:void
draw_line	src/Event/SpaceCube.h	/^    bool draw_line = false;$/;"	m	class:SpaceCube	typeref:typename:bool
draw_sides	src/Event/JMirror.h	/^    bool draw_sides = false;$/;"	m	class:JMirror	typeref:typename:bool
draw_view	src/Event/JMirror.h	/^    bool draw_view = false;$/;"	m	class:JMirror	typeref:typename:bool
dst	src/Event/JPPBuffer.h	/^    ofFbo   *dst;       \/\/ Destination  ->  Pong$/;"	m	struct:pingPongBuffer	typeref:typename:ofFbo *
encodedIntToChar	src/MsgParser.cpp	/^char encodedIntToChar(int i, char index) { return (*(((char *)&i) + index)); }$/;"	f	typeref:typename:char
end	src/Event/JVecField.hpp	/^    ofVec2f start, end; \/\/ For each line$/;"	m	class:JVecField	typeref:typename:ofVec2f
end	src/JShader.cpp	/^void JShader::end() { s.end(); }$/;"	f	class:JShader	typeref:typename:void
endPoint	src/Event/JDivisionGrid.hpp	/^    ofPoint endPoint;$/;"	m	class:JPoly	typeref:typename:ofPoint
endPointRotation	src/Event/dotsBlob.hpp	/^    float endPointRotation = 0;$/;"	m	class:dotsBlob	typeref:typename:float
endSide	src/Event/JDivisionGrid.hpp	/^    int endSide;$/;"	m	class:JPoly	typeref:typename:int
endTime	src/Event/JEvent.hpp	/^  unsigned int endTime = 1000;$/;"	m	class:JEvent	typeref:typename:unsigned int
envValues	src/MsgParser.hpp	/^    map<string, short> envValues;$/;"	m	class:MsgParser	typeref:typename:map<string,short>
envelopes	src/Event/JEvent.hpp	/^  vector<vector<Env *>> envelopes;$/;"	m	class:JEvent	typeref:typename:vector<vector<Env * >>
events	src/Event/JEvent.hpp	/^  JEvent **events = nullptr;$/;"	m	class:JEvent	typeref:typename:JEvent **
events	src/ofxJVisuals.hpp	/^  JEvent *events[MAX_EVENTS_PTRS];$/;"	m	class:ofxJVisuals	typeref:typename:JEvent * []
externalVelocity	src/Event/JPhysarum.hpp	/^    ofTexture* externalVelocity = nullptr;$/;"	m	class:JPhysarum	typeref:typename:ofTexture *
f	src/Event/JText.hpp	/^    ofTrueTypeFont* f;$/;"	m	class:JText	typeref:typename:ofTrueTypeFont *
fadeIn	src/Event/MultiMesh.cpp	/^void MultiMesh::fadeIn(){$/;"	f	class:MultiMesh	typeref:typename:void
fadeInEnv	src/Event/MultiMeshMaybeTomorrow.hpp	/^    Env* fadeInEnv; bool bFadeIn = false;$/;"	m	class:MultiMeshMaybeTomorrow	typeref:typename:Env *
fadeOut	src/Event/MultiMesh.cpp	/^void MultiMesh::fadeOut(){$/;"	f	class:MultiMesh	typeref:typename:void
fadeOutEnv	src/Event/MultiMeshMaybeTomorrow.hpp	/^    Env* fadeOutEnv; bool bFadeOut = false;$/;"	m	class:MultiMeshMaybeTomorrow	typeref:typename:Env *
fadePhase	src/Event/JVideoPlayer.cpp	/^void JVideoPlayer::fadePhase(){$/;"	f	class:JVideoPlayer	typeref:typename:void
fadeTime	src/Event/particleSystemOpenCL.hpp	/^    float fadeTime = 0.001;$/;"	m	class:particleSystem	typeref:typename:float
fbo	src/ofxJVisuals.hpp	/^  ofFbo fbo, renderFbo;$/;"	m	class:ofxJVisuals	typeref:typename:ofFbo
fboDisplayMode	src/ofxJVisuals.hpp	/^  char fboDisplayMode = 1;$/;"	m	class:ofxJVisuals	typeref:typename:char
fileName	src/Env.hpp	/^    string fileName = "";$/;"	m	class:Env	typeref:typename:string
fillBuffer	src/Event/JEvent.cpp	/^void JEvent::fillBuffer(ofxOscMessage& m){$/;"	f	class:JEvent	typeref:typename:void
fillMeshOneFrame	src/Event/SpaceCube.cpp	/^void SpaceCube::fillMeshOneFrame(int modulo, bool on_cue){$/;"	f	class:SpaceCube	typeref:typename:void
fillMeshOneFrameFlag	src/Event/SpaceCube.h	/^    bool fillMeshOneFrameFlag = false;$/;"	m	class:SpaceCube	typeref:typename:bool
filled	src/Event/SpaceCube.h	/^    bool filled = false;$/;"	m	class:SpaceCube	typeref:typename:bool
findLeftAndRight	src/Event/RectangleMask.cpp	/^void RectangleMask::findLeftAndRight(){$/;"	f	class:RectangleMask	typeref:typename:void
findSelf	src/Event/JVorm.cpp	/^JVorm::connection* JVorm::findSelf(JVorm* pointer){$/;"	f	class:JVorm	typeref:typename:JVorm::connection *
floatPointer	src/mapValue.h	/^    float* floatPointer;$/;"	m	class:mapValue	typeref:typename:float *
focus	src/cameraController.hpp	/^    ofVec3f* focus = nullptr;$/;"	m	class:cameraController	typeref:typename:ofVec3f *
font	src/Event/JVideoPlayer.hpp	/^    ofTrueTypeFont  font;$/;"	m	class:JVideoPlayer	typeref:typename:ofTrueTypeFont
forceMultiplier	src/Event/particleSystemOpenCL.hpp	/^    float2 forceMultiplier = float2(1, 1);$/;"	m	class:particleSystem	typeref:typename:float2
formJVorm	src/Event/JVorm.cpp	/^void JVorm::formJVorm(){$/;"	f	class:JVorm	typeref:typename:void
frame	src/Event/JVecField.hpp	/^    ofImage frame;$/;"	m	class:JVecField	typeref:typename:ofImage
freq	src/Wavetable.h	/^    float freq=1;$/;"	m	class:Wavetable	typeref:typename:float
fromBuffer	src/Event/JLine.cpp	/^void JLine::fromBuffer(int bufferMode){$/;"	f	class:JLine	typeref:typename:void
fxaaPP	src/ofxJVisuals.hpp	/^  FxaaPass::Ptr fxaaPP = nullptr;$/;"	m	class:ofxJVisuals	typeref:typename:FxaaPass::Ptr
generateJildert	src/Event/MultiMesh.cpp	/^void MultiMesh::generateJildert(){$/;"	f	class:MultiMesh	typeref:typename:void
generateJildert	src/Event/MultiMeshMaybeTomorrow.cpp	/^void MultiMeshMaybeTomorrow::generateJildert(){$/;"	f	class:MultiMeshMaybeTomorrow	typeref:typename:void
generateMesh	src/Event/JDivisionGrid.hpp	/^    void generateMesh(){$/;"	f	class:JPoly	typeref:typename:void
generateRandomMeshes	src/Event/MultiMesh.cpp	/^void MultiMesh::generateRandomMeshes(int num, ofFloatColor color){$/;"	f	class:MultiMesh	typeref:typename:void
generateRandomMeshes	src/Event/MultiMeshMaybeTomorrow.cpp	/^void MultiMeshMaybeTomorrow::generateRandomMeshes(int num, ofFloatColor color){$/;"	f	class:MultiMeshMaybeTomorrow	typeref:typename:void
generateRandomRects	src/Event/JDivisionGrid.cpp	/^void JDivisionGrid::generateRandomRects(){ \/\/ call initRect first$/;"	f	class:JDivisionGrid	typeref:typename:void
generateSeed	src/Event/JNoise.cpp	/^void JNoise::generateSeed(){$/;"	f	class:JNoise	typeref:typename:void
generateSymmetricMeshes	src/Event/MultiMesh.cpp	/^void MultiMesh::generateSymmetricMeshes(int num, ofFloatColor color, float radiusTemp){$/;"	f	class:MultiMesh	typeref:typename:void
generateSymmetricMeshes	src/Event/MultiMeshMaybeTomorrow.cpp	/^void MultiMeshMaybeTomorrow::generateSymmetricMeshes(int num, ofFloatColor color, float radiusTe/;"	f	class:MultiMeshMaybeTomorrow	typeref:typename:void
getAddr	src/Event/JEvent.hpp	/^  JEvent &getAddr() { return *this; };$/;"	f	class:JEvent	typeref:typename:JEvent &
getAddrNext	src/Event/JEvent.hpp	/^  JEvent &getAddrNext() { return next->getAddr(); };$/;"	f	class:JEvent	typeref:typename:JEvent &
getAllEvents	src/ofxJVisuals.cpp	/^ofxOscMessage ofxJVisuals::getAllEvents() {$/;"	f	class:ofxJVisuals	typeref:typename:ofxOscMessage
getAlphaScreen	src/ofxJVisuals.cpp	/^AlphaBlackScreen *MsgParser::getAlphaScreen() { return v->alphaScreen; }$/;"	f	class:MsgParser	typeref:typename:AlphaBlackScreen *
getBigger	src/Event/SpaceCube.cpp	/^void SpaceCube::getBigger(int size_){$/;"	f	class:SpaceCube	typeref:typename:void
getBlobsInRange	src/Event/dotsBlob.cpp	/^vector<dotsBlob*> dotsBlob::getBlobsInRange(){$/;"	f	class:dotsBlob	typeref:typename:vector<dotsBlob * >
getCam	src/ofxJVisuals.cpp	/^ofEasyCam *MsgParser::getCam() { return &(v->cam); }$/;"	f	class:MsgParser	typeref:typename:ofEasyCam *
getChild	src/Event/JRectangle.cpp	/^JRectangle* JRectangle::getChild(){$/;"	f	class:JRectangle	typeref:typename:JRectangle *
getColorFromImg	src/Event/meshLandscape.cpp	/^ofFloatColor getColorFromImg(ofShortImage& img, int x, int y){$/;"	f	typeref:typename:ofFloatColor
getDirection	src/Env.cpp	/^void Env::getDirection(uint8 ti){$/;"	f	class:Env	typeref:typename:void
getDirectoryNameForFrame	src/Event/JMesh.cpp	/^string JMesh::getDirectoryNameForFrame(){$/;"	f	class:JMesh	typeref:typename:string
getEvent	src/Event/JEvent.cpp	/^JEvent* JEvent::getEvent(int index){$/;"	f	class:JEvent	typeref:typename:JEvent *
getEventById	src/ofxJVisuals.cpp	/^JEvent *JEvent::getEventById(unsigned int id, unsigned int subID) {$/;"	f	class:JEvent	typeref:typename:JEvent *
getEventById	src/ofxJVisuals.cpp	/^JEvent *MsgParser::getEventById(unsigned int id, unsigned int subID) {$/;"	f	class:MsgParser	typeref:typename:JEvent *
getEventById	src/ofxJVisuals.cpp	/^JEvent *ofxJVisuals::getEventById(unsigned int idToFind, unsigned int subID) {$/;"	f	class:ofxJVisuals	typeref:typename:JEvent *
getFbo	src/ofxJVisuals.cpp	/^ofFbo *MsgParser::getFbo() { return &(v->fbo); }$/;"	f	class:MsgParser	typeref:typename:ofFbo *
getField	src/Event/JVecField.cpp	/^ofVec2f JVecField::getField(ofVec2f position) {$/;"	f	class:JVecField	typeref:typename:ofVec2f
getFreePointers	src/ofxJVisuals.cpp	/^void MsgParser::getFreePointers(string host, int port) {$/;"	f	class:MsgParser	typeref:typename:void
getFreePointers	src/ofxJVisuals.cpp	/^void ofxJVisuals::getFreePointers(string ip, int port) {$/;"	f	class:ofxJVisuals	typeref:typename:void
getLast	src/Event/JEvent.cpp	/^JEvent* JEvent::getLast(){$/;"	f	class:JEvent	typeref:typename:JEvent *
getLastAdded	src/ofxJVisuals.hpp	/^  JEvent *getLastAdded() { return last; }$/;"	f	class:ofxJVisuals	typeref:typename:JEvent *
getLastEnv	src/Event/JEvent.cpp	/^Env* JEvent::getLastEnv(){$/;"	f	class:JEvent	typeref:typename:Env *
getLastFound	src/ofxJVisuals.hpp	/^  JEvent *getLastFound() { return lastFound; }$/;"	f	class:ofxJVisuals	typeref:typename:JEvent *
getMeshName	src/Event/JMesh.cpp	/^string JMesh::getMeshName(){$/;"	f	class:JMesh	typeref:typename:string
getNormalFromImg	src/Event/meshLandscape.cpp	/^ofVec3f getNormalFromImg(ofShortImage& img, int x, int y) {$/;"	f	typeref:typename:ofVec3f
getNumEnv	src/Event/JEvent.cpp	/^short JEvent::getNumEnv(){$/;"	f	class:JEvent	typeref:typename:short
getNumParticles	src/Event/JVorm.cpp	/^uint16 JVorm::getNumParticles(){$/;"	f	class:JVorm	typeref:typename:uint16
getPtr	src/Env.cpp	/^void* Pointer::getPtr(){$/;"	f	class:Pointer	typeref:typename:void *
getRandomBin	src/Event/JVideoPlayer.cpp	/^Bin* JVideoPlayer::getRandomBin(){$/;"	f	class:JVideoPlayer	typeref:typename:Bin *
getSelectedFont	src/ofxJVisuals.cpp	/^ofTrueTypeFont *MsgParser::getSelectedFont() { return v->selectedFont; }$/;"	f	class:MsgParser	typeref:typename:ofTrueTypeFont *
getShaders	src/ofxJVisuals.cpp	/^vector<JShader *> *MsgParser::getShaders() { return &(v->shaders); }$/;"	f	class:MsgParser	typeref:typename:vector<JShader * > *
getSmaller	src/Event/SpaceCube.cpp	/^void SpaceCube::getSmaller(int size_){$/;"	f	class:SpaceCube	typeref:typename:void
getTime	src/Env.cpp	/^unsigned long Env::getTime(){$/;"	f	class:Env	typeref:typename:unsigned long
getTimeMillis	src/Event/JEvent.cpp	/^unsigned long JEvent::getTimeMillis(){$/;"	f	class:JEvent	typeref:typename:unsigned long
getVertexFromImg	src/Event/meshLandscape.cpp	/^ofVec3f meshLandscape::getVertexFromImg(ofShortImage& img, int x, int y) {$/;"	f	class:meshLandscape	typeref:typename:ofVec3f
globalAlpha	src/Event/MultiMesh.hpp	/^    float globalAlpha = 0;$/;"	m	class:MultiMesh	typeref:typename:float
globalAlphaAdd	src/Event/MultiMesh.hpp	/^    float globalAlphaAdd = 0.1;$/;"	m	class:MultiMesh	typeref:typename:float
globalAlphaAdd	src/Event/MultiMeshMaybeTomorrow.hpp	/^    float globalAlphaAdd = 0.1;$/;"	m	class:MultiMeshMaybeTomorrow	typeref:typename:float
globalColor	src/Event/MultiMesh.hpp	/^    ofFloatColor globalColor; \/\/ to store floatcolor in$/;"	m	class:MultiMesh	typeref:typename:ofFloatColor
globalColor	src/Event/MultiMeshMaybeTomorrow.hpp	/^    ofFloatColor globalColor;$/;"	m	class:MultiMeshMaybeTomorrow	typeref:typename:ofFloatColor
globalForce	src/Event/particleSystemOpenCL.hpp	/^    float2 globalForce = float2(0, 0);$/;"	m	class:particleSystem	typeref:typename:float2
gotMessage	exampleSimple/src/ofApp.cpp	/^void ofApp::gotMessage(ofMessage msg) {}$/;"	f	class:ofApp	typeref:typename:void
gotMessage	exampleSimpleTlFix/src/ofApp.cpp	/^void ofApp::gotMessage(ofMessage msg){$/;"	f	class:ofApp	typeref:typename:void
gradientAlpha	src/AlphaBlackScreen.hpp	/^    int gradientAlpha;$/;"	m	class:AlphaBlackScreen	typeref:typename:int
gradientColor	src/AlphaBlackScreen.hpp	/^    ofColor gradientColor = ofColor(255);$/;"	m	class:AlphaBlackScreen	typeref:typename:ofColor
gridsize	src/Event/SpaceCube.h	/^    int gridsize;$/;"	m	class:SpaceCube	typeref:typename:int
growRadius	src/Event/MultiMesh.cpp	/^void MultiMesh::growRadius(int direction, float speed){$/;"	f	class:MultiMesh	typeref:typename:void
growRadius	src/Event/MultiMeshMaybeTomorrow.cpp	/^void MultiMeshMaybeTomorrow::growRadius(int direction, float speed){$/;"	f	class:MultiMeshMaybeTomorrow	typeref:typename:void
gui	src/Event/JPhysarum.hpp	/^    ofxPanel gui;$/;"	m	class:JPhysarum	typeref:typename:ofxPanel
halfTime	src/Event/MultiMeshMaybeTomorrow.cpp	/^void MultiMeshMaybeTomorrow::halfTime(){$/;"	f	class:MultiMeshMaybeTomorrow	typeref:typename:void
height	src/Event/meshLandscape.hpp	/^    int height = 48;$/;"	m	class:meshLandscape	typeref:typename:int
heightOffset	src/Event/JLine.hpp	/^    int heightOffset = 0;$/;"	m	class:JLine	typeref:typename:int
horizontalNoise	src/Event/JNoise.cpp	/^void JNoise::horizontalNoise(int l){$/;"	f	class:JNoise	typeref:typename:void
id	src/Env.hpp	/^    int id;$/;"	m	class:Pointer	typeref:typename:int
id	src/Env.hpp	/^    uint8 id = 0;$/;"	m	class:Env	typeref:typename:uint8
id	src/Event/JEvent.hpp	/^  unsigned int id = 0;$/;"	m	class:JEvent	typeref:typename:unsigned int
image	src/Event/JImage.hpp	/^    ofImage image;$/;"	m	class:JImage	typeref:typename:ofImage
imageFloat	src/Event/imageFloat.cpp	/^imageFloat::imageFloat(string src){$/;"	f	class:imageFloat
imageFloat	src/Event/imageFloat.hpp	/^class imageFloat: public JEvent, public ofImage{$/;"	c
imageFloat_hpp	src/Event/imageFloat.hpp	/^#define imageFloat_hpp$/;"	d
imageFloater	src/Event/imageFloat.cpp	/^imageFloater::imageFloater(imageFloat* src){$/;"	f	class:imageFloater
imageFloater	src/Event/imageFloat.hpp	/^class imageFloater: public JRectangle{ \/\/ Inherits Event$/;"	c
imageFloating	src/Event/JRectangle.hpp	/^    virtual void imageFloating(){};$/;"	f	class:JRectangle	typeref:typename:void
imageFloating	src/Event/imageFloat.cpp	/^void imageFloater::imageFloating(){$/;"	f	class:imageFloater	typeref:typename:void
img	src/Event/imageFloat.hpp	/^    imageFloat* img;$/;"	m	class:imageFloater	typeref:typename:imageFloat *
init	src/Event/JEvent.hpp	/^  virtual void init(){};$/;"	f	class:JEvent	typeref:typename:void
init	src/Event/JVorm.cpp	/^void JVorm::init(){$/;"	f	class:JVorm	typeref:typename:void
init	src/Event/particleSystem.cpp	/^void particleSystem::init(int numParticles){$/;"	f	class:particleSystem	typeref:typename:void
init	src/Event/particleSystemOpenCL.cpp	/^void particleSystem::init(int numParticles, string clFile){$/;"	f	class:particleSystem	typeref:typename:void
initCam	src/ofxJVisuals.cpp	/^void MsgParser::initCam() { v->initCam(); }$/;"	f	class:MsgParser	typeref:typename:void
initCam	src/ofxJVisuals.cpp	/^void ofxJVisuals::initCam() {$/;"	f	class:ofxJVisuals	typeref:typename:void
initCircularMaskFbo	src/ofxJVisuals.cpp	/^void ofxJVisuals::initCircularMaskFbo(glm::vec2 size, int num) {$/;"	f	class:ofxJVisuals	typeref:typename:void
initMesh	src/ofxJVisuals.cpp	/^void ofxJVisuals::initMesh() {$/;"	f	class:ofxJVisuals	typeref:typename:void
initRect	src/Event/JDivisionGrid.cpp	/^void JDivisionGrid::initRect(){$/;"	f	class:JDivisionGrid	typeref:typename:void
initSCsender	src/MsgParser.cpp	/^ofxOscSender *MsgParser::initSCsender(string ip, int port) {$/;"	f	class:MsgParser	typeref:typename:ofxOscSender *
inkscape	exampleSimple/bin/data/test_0.svg	/^   xmlns:svg="http:\/\/www.w3.org\/2000\/svg">$/;"	n	uri:http://www.inkscape.org/namespaces/inkscape
instantFormJVorm	src/Event/JVorm.cpp	/^void JVorm::instantFormJVorm(){$/;"	f	class:JVorm	typeref:typename:void
intPointer	src/mapValue.h	/^    int* intPointer;$/;"	m	class:mapValue	typeref:typename:int *
ios	addon_config.mk	/^ios:$/;"	t
isConnectable	src/Event/JVorm.cpp	/^bool JVorm::isConnectable(){$/;"	f	class:JVorm	typeref:typename:bool
is_sphere	src/Event/SpaceCube.h	/^    bool is_sphere = false;$/;"	m	class:SpaceCube	typeref:typename:bool
jevent	src/Event/JEventBase.hpp	/^namespace jevent {$/;"	n
jump	src/Event/JRectangle.cpp	/^void JRectangle::jump(glm::vec2 distance){$/;"	f	class:JRectangle	typeref:typename:void
keyPressed	exampleSimple/src/ofApp.cpp	/^void ofApp::keyPressed(int key) { visualizer->keyPressed(key); }$/;"	f	class:ofApp	typeref:typename:void
keyPressed	exampleSimpleTlFix/src/ofApp.cpp	/^void ofApp::keyPressed(int key){$/;"	f	class:ofApp	typeref:typename:void
keyPressed	src/ofxJVisuals.cpp	/^void ofxJVisuals::keyPressed(int key) {$/;"	f	class:ofxJVisuals	typeref:typename:void
keyReleased	exampleSimple/src/ofApp.cpp	/^void ofApp::keyReleased(int key) {}$/;"	f	class:ofApp	typeref:typename:void
keyReleased	exampleSimpleTlFix/src/ofApp.cpp	/^void ofApp::keyReleased(int key){$/;"	f	class:ofApp	typeref:typename:void
kill	src/MsgParser.cpp	/^bool MsgParser::kill(ofxOscMessage &m) {$/;"	f	class:MsgParser	typeref:typename:bool
killAll	src/ofxJVisuals.cpp	/^void MsgParser::killAll() { v->killAll(); }$/;"	f	class:MsgParser	typeref:typename:void
killAll	src/ofxJVisuals.cpp	/^void ofxJVisuals::killAll() {$/;"	f	class:ofxJVisuals	typeref:typename:void
last	src/ofxJVisuals.hpp	/^  JEvent *last = nullptr;$/;"	m	class:ofxJVisuals	typeref:typename:JEvent *
lastCalled	src/ofxJVisuals.hpp	/^  JEvent *lastCalled = nullptr;$/;"	m	class:ofxJVisuals	typeref:typename:JEvent *
lastEnv	src/Event/JEvent.hpp	/^  Env *lastEnv = nullptr;$/;"	m	class:JEvent	typeref:typename:Env *
lastFound	src/Event/JEvent.hpp	/^  JEvent **lastFound = nullptr;$/;"	m	class:JEvent	typeref:typename:JEvent **
lastFound	src/ofxJVisuals.hpp	/^  JEvent *lastFound = nullptr;$/;"	m	class:ofxJVisuals	typeref:typename:JEvent *
lastPtr	src/Event/JEvent.hpp	/^  JEvent **lastPtr = nullptr;$/;"	m	class:JEvent	typeref:typename:JEvent **
layer1	exampleSimple/bin/data/test_0.svg	/^     id="layer1">$/;"	i
layerID	src/Event/JEventBase.hpp	/^  float layerID = 2;$/;"	m	class:JEventBase	typeref:typename:float
layers	src/ofxJVisuals.hpp	/^  JLayer *layers[NUMLAYERS]; \/\/ linked list, use AddEvent to add$/;"	m	class:ofxJVisuals	typeref:typename:JLayer * []
lefts	src/Event/RectangleMask.hpp	/^    vector<int> lefts;$/;"	m	class:RectangleMask	typeref:typename:vector<int>
levels	src/Env.hpp	/^    vector<float> levels;$/;"	m	class:Env	typeref:typename:vector<float>
lightLine	src/Event/SpaceCube.cpp	/^void SpaceCube::lightLine(int index, bool random){$/;"	f	class:SpaceCube	typeref:typename:void
line	src/Event/JLine.hpp	/^    ofPolyline line;$/;"	m	class:JLine	typeref:typename:ofPolyline
lineLength	src/Event/JVecField.hpp	/^    float lineLength = 10;$/;"	m	class:JVecField	typeref:typename:float
lineWidth	src/Event/JEventBase.hpp	/^  float lineWidth = 1;$/;"	m	class:JEventBase	typeref:typename:float
lineWidth	src/Event/JNoise.hpp	/^    int lineWidth = 1;$/;"	m	class:JNoise	typeref:typename:int
lineWidth	src/Event/JVecField.hpp	/^    float lineWidth = 1;$/;"	m	class:JVecField	typeref:typename:float
lineWidth	src/Event/SpaceCube.h	/^    int lineWidth = 3;$/;"	m	class:SpaceCube	typeref:typename:int
lineWidth	src/JShaderLines.hpp	/^    float lineWidth = 1.65;$/;"	m	class:JShaderLines	typeref:typename:float
linesAmount	src/Event/JNoise.hpp	/^    int linesAmount = 100;$/;"	m	class:JNoise	typeref:typename:int
linkValues	src/Event/JEventBase.hpp	/^  void linkValues() {$/;"	f	class:JEventBase	typeref:typename:void
linux64	addon_config.mk	/^linux64:$/;"	t
linuxarmv6l	addon_config.mk	/^linuxarmv6l:$/;"	t
linuxarmv7l	addon_config.mk	/^linuxarmv7l:$/;"	t
load	src/Event/JVideoPlayer.cpp	/^bool JVideoPlayer::load(string path){$/;"	f	class:JVideoPlayer	typeref:typename:bool
load	src/JShader.cpp	/^void JShader::load(string name) {$/;"	f	class:JShader	typeref:typename:void
loadImage	src/Event/JImage.cpp	/^bool JImage::loadImage(string path){$/;"	f	class:JImage	typeref:typename:bool
loadLastMaskFile	src/ofxJVisuals.cpp	/^void ofxJVisuals::loadLastMaskFile() {$/;"	f	class:ofxJVisuals	typeref:typename:void
loc	src/Event/JEventBase.hpp	/^  glm::vec3 loc = {0, 0, 0};$/;"	m	class:JEventBase	typeref:typename:glm::vec3
loc	src/Event/dotsBlob.hpp	/^    ofVec3f loc = ofVec3f(0, 0, 0);$/;"	m	class:dotsBlob	typeref:typename:ofVec3f
locAdjustmentForExport	src/Event/JDivisionGrid.hpp	/^    glm::vec3 locAdjustmentForExport;$/;"	m	class:JPoly	typeref:typename:glm::vec3
localColor	src/Event/JNoise.hpp	/^    ofColor localColor;$/;"	m	class:JNoise	typeref:typename:ofColor
locationIsDestination	src/Event/JParticle.cpp	/^void JParticle::locationIsDestination(){$/;"	f	class:JParticle	typeref:typename:void
locations	src/Event/MultiMesh.hpp	/^    ofVec3f** locations;$/;"	m	class:MultiMesh	typeref:typename:ofVec3f **
locations	src/Event/MultiMeshMaybeTomorrow.hpp	/^    ofVec2f** locations;$/;"	m	class:MultiMeshMaybeTomorrow	typeref:typename:ofVec2f **
loop	src/Env.hpp	/^    bool loop = false;$/;"	m	class:Env	typeref:typename:bool
loop	src/Event/JVideoPlayer.hpp	/^    bool loop = false;$/;"	m	class:JVideoPlayer	typeref:typename:bool
loopPoints	src/Event/JVideoPlayer.hpp	/^    vector<int> loopPoints {0,60};$/;"	m	class:JVideoPlayer	typeref:typename:vector<int>
m	src/Event/JMesh.hpp	/^    ofMesh m;$/;"	m	class:JMesh	typeref:typename:ofMesh
m	src/Event/JRectangle.hpp	/^    ofMesh* m = nullptr;$/;"	m	class:JRectangle	typeref:typename:ofMesh *
m	src/Event/JWaveform.hpp	/^    ofMesh m;$/;"	m	class:JWaveform	typeref:typename:ofMesh
m	src/Event/meshLandscape.hpp	/^    ofMesh m;$/;"	m	class:meshLandscape	typeref:typename:ofMesh
main	exampleSimple/src/main.cpp	/^int main(){$/;"	f	typeref:typename:int
main	exampleSimpleTlFix/src/main.cpp	/^int main(){$/;"	f	typeref:typename:int
make	src/MsgParser.cpp	/^bool MsgParser::make(ofxOscMessage &m) {$/;"	f	class:MsgParser	typeref:typename:bool
makeCoordinates	src/Event/JVorm.cpp	/^void JVorm::makeCoordinates(uint8 numSides, int sideDiv, float radius_, bool onDestination){$/;"	f	class:JVorm	typeref:typename:void
makeFit	src/ofxJVisuals.cpp	/^void ofxJVisuals::makeFit(glm::vec2 size) {$/;"	f	class:ofxJVisuals	typeref:typename:void
mapValue	src/mapValue.h	/^    mapValue(){$/;"	f	class:mapValue
mapValue	src/mapValue.h	/^    mapValue(float* v){$/;"	f	class:mapValue
mapValue	src/mapValue.h	/^    mapValue(ofColor* v, char type = 'a'){$/;"	f	class:mapValue
mapValue	src/mapValue.h	/^class mapValue{$/;"	c
mapValue_h	src/mapValue.h	/^#define mapValue_h$/;"	d
mapValues	src/Event/JEvent.hpp	/^  mapValue *mapValues[24];$/;"	m	class:JEvent	typeref:typename:mapValue * [24]
mask	src/Event/JShaderTest.hpp	/^    ofFbo mask;$/;"	m	class:JShaderTest	typeref:typename:ofFbo
mask	src/ofxJVisuals.hpp	/^  ofImage mask;$/;"	m	class:ofxJVisuals	typeref:typename:ofImage
maskBrightness	src/ofxJVisuals.hpp	/^  unsigned char maskBrightness = 0;$/;"	m	class:ofxJVisuals	typeref:typename:unsigned char
mass	src/Event/particleSystemOpenCL.cpp	/^    float mass;$/;"	m	struct:__anon240f87380108	typeref:typename:float	file:
maxConnections	src/Event/dotsBlob.hpp	/^    char maxConnections = 8;$/;"	m	class:dotsBlob	typeref:typename:char
maxDistance	src/Event/JVorm.h	/^    float* maxDistance;$/;"	m	class:JVorm	typeref:typename:float *
mesh	src/Event/JPhysarum.hpp	/^    ofVboMesh mesh;$/;"	m	class:JPhysarum	typeref:typename:ofVboMesh
mesh	src/Event/JThickLine.hpp	/^  ofMesh mesh;$/;"	m	class:JThickLine	typeref:typename:ofMesh
mesh	src/Event/SpaceCube.h	/^    ofMesh mesh;$/;"	m	class:SpaceCube	typeref:typename:ofMesh
mesh	src/Event/particleSystem.h	/^    	ofVboMesh mesh;$/;"	m	class:particleSystem	typeref:typename:ofVboMesh
mesh	src/ofxJVisuals.hpp	/^  ofMesh mesh;$/;"	m	class:ofxJVisuals	typeref:typename:ofMesh
meshLandscape	src/Event/meshLandscape.cpp	/^meshLandscape::meshLandscape(string img1, string normalImg, int height, int widthBetweenNodes, i/;"	f	class:meshLandscape
meshLandscape	src/Event/meshLandscape.hpp	/^class meshLandscape: public JEvent{$/;"	c
meshLandscape_hpp	src/Event/meshLandscape.hpp	/^#define meshLandscape_hpp$/;"	d
meshVertices	src/ofxJVisuals.hpp	/^  vector<glm::vec3> meshVertices;$/;"	m	class:ofxJVisuals	typeref:typename:vector<glm::vec3>
meshes	src/Event/MultiMesh.hpp	/^    ofMesh* meshes = nullptr;$/;"	m	class:MultiMesh	typeref:typename:ofMesh *
meshes	src/Event/MultiMeshMaybeTomorrow.hpp	/^    ofMesh* meshes;$/;"	m	class:MultiMeshMaybeTomorrow	typeref:typename:ofMesh *
meta	addon_config.mk	/^meta:$/;"	t
minDistance	src/Event/dotsBlob.hpp	/^    float minDistance = 50;$/;"	m	class:dotsBlob	typeref:typename:float
mirror	src/Event/JVorm.cpp	/^void JVorm::mirror(){$/;"	f	class:JVorm	typeref:typename:void
mirrorAllBins	src/Event/JVideoPlayer.cpp	/^void JVideoPlayer::mirrorAllBins(bool h, bool v){$/;"	f	class:JVideoPlayer	typeref:typename:void
mode	src/Event/JEventBase.hpp	/^  float mode = 0;$/;"	m	class:JEventBase	typeref:typename:float
mode	src/Event/JVecField.hpp	/^    char mode = VECFIELD_MODE::UNDERLAYING;$/;"	m	class:JVecField	typeref:typename:char
mode	src/Event/JVideoPlayer.hpp	/^    char mode = JVIDEO_MODE_NORMAL;$/;"	m	class:JVideoPlayer	typeref:typename:char
mode	src/Event/SpaceCube.h	/^    char mode = 0;$/;"	m	class:SpaceCube	typeref:typename:char
modifiers	src/Event/JEvent.hpp	/^  vector<JModifier *> modifiers;$/;"	m	class:JEvent	typeref:typename:vector<JModifier * >
morph	src/Event/MultiMesh.cpp	/^void MultiMesh::morph(){$/;"	f	class:MultiMesh	typeref:typename:void
morph	src/Event/MultiMeshMaybeTomorrow.cpp	/^void MultiMeshMaybeTomorrow::morph(){$/;"	f	class:MultiMeshMaybeTomorrow	typeref:typename:void
morphAngle	src/Event/MultiMesh.hpp	/^    void morph(); bool bMorph = false; void doMorph(float angle, float time); float morphAngle, /;"	m	class:MultiMesh	typeref:typename:float
morphAngle	src/Event/MultiMeshMaybeTomorrow.hpp	/^    void morph(); bool bMorph = false; void doMorph(float angle, float time); float morphAngle, /;"	m	class:MultiMeshMaybeTomorrow	typeref:typename:float
morphTime	src/Event/MultiMesh.hpp	/^    void morph(); bool bMorph = false; void doMorph(float angle, float time); float morphAngle, /;"	m	class:MultiMesh	typeref:typename:float
morphTime	src/Event/MultiMeshMaybeTomorrow.hpp	/^    void morph(); bool bMorph = false; void doMorph(float angle, float time); float morphAngle, /;"	m	class:MultiMeshMaybeTomorrow	typeref:typename:float
mouseControl	src/Event/particleSystemOpenCL.hpp	/^    bool mouseControl = false;$/;"	m	class:particleSystem	typeref:typename:bool
mouseDragged	exampleSimple/src/ofApp.cpp	/^void ofApp::mouseDragged(int x, int y, int button) {}$/;"	f	class:ofApp	typeref:typename:void
mouseDragged	exampleSimpleTlFix/src/ofApp.cpp	/^void ofApp::mouseDragged(int x, int y, int button){$/;"	f	class:ofApp	typeref:typename:void
mouseMoved	exampleSimple/src/ofApp.cpp	/^void ofApp::mouseMoved(int x, int y) {}$/;"	f	class:ofApp	typeref:typename:void
mouseMoved	exampleSimpleTlFix/src/ofApp.cpp	/^void ofApp::mouseMoved(int x, int y){$/;"	f	class:ofApp	typeref:typename:void
mousePressed	exampleSimple/src/ofApp.cpp	/^void ofApp::mousePressed(int x, int y, int button) {}$/;"	f	class:ofApp	typeref:typename:void
mousePressed	exampleSimpleTlFix/src/ofApp.cpp	/^void ofApp::mousePressed(int x, int y, int button){$/;"	f	class:ofApp	typeref:typename:void
mousePressed	src/ofxJVisuals.cpp	/^void ofxJVisuals::mousePressed(int x, int y, int button) {$/;"	f	class:ofxJVisuals	typeref:typename:void
mouseReleased	exampleSimple/src/ofApp.cpp	/^void ofApp::mouseReleased(int x, int y, int button) {}$/;"	f	class:ofApp	typeref:typename:void
mouseReleased	exampleSimpleTlFix/src/ofApp.cpp	/^void ofApp::mouseReleased(int x, int y, int button){$/;"	f	class:ofApp	typeref:typename:void
move	src/Event/JPrimitive.hpp	/^    void move(){$/;"	f	class:JPrimitive	typeref:typename:void
moveBackwards	src/Event/JMirror.h	/^    bool moveBackwards;$/;"	m	class:JMirror	typeref:typename:bool
moveCorner	src/Event/JVorm.cpp	/^void JVorm::moveCorner(int corner_, glm::vec3 distance_){$/;"	f	class:JVorm	typeref:typename:void
moveHorizontal	src/Event/MultiMesh.cpp	/^void MultiMesh::moveHorizontal(){$/;"	f	class:MultiMesh	typeref:typename:void
moveHorizontal	src/Event/MultiMeshMaybeTomorrow.cpp	/^void MultiMeshMaybeTomorrow::moveHorizontal(){$/;"	f	class:MultiMeshMaybeTomorrow	typeref:typename:void
moveOutVertex	src/Event/MultiMesh.cpp	/^void MultiMesh::moveOutVertex(int index){$/;"	f	class:MultiMesh	typeref:typename:void
moveOutVertex	src/Event/MultiMeshMaybeTomorrow.cpp	/^void MultiMeshMaybeTomorrow::moveOutVertex(int index){$/;"	f	class:MultiMeshMaybeTomorrow	typeref:typename:void
moveTriangle	src/Event/JMirror.cpp	/^void JMirror::moveTriangle(){$/;"	f	class:JMirror	typeref:typename:void
moveUp	src/Event/JMirror.cpp	/^void JMirror::moveUp(){$/;"	f	class:JMirror	typeref:typename:void
moveVertical	src/Event/MultiMeshMaybeTomorrow.cpp	/^void MultiMeshMaybeTomorrow::moveVertical(){$/;"	f	class:MultiMeshMaybeTomorrow	typeref:typename:void
moveWithPulse	src/Event/MultiMesh.cpp	/^void MultiMesh::moveWithPulse(){$/;"	f	class:MultiMesh	typeref:typename:void
moveWithPulse	src/Event/MultiMeshMaybeTomorrow.cpp	/^void MultiMeshMaybeTomorrow::moveWithPulse(){$/;"	f	class:MultiMeshMaybeTomorrow	typeref:typename:void
move_up	src/Event/JMirror.h	/^    bool move_up;$/;"	m	class:JMirror	typeref:typename:bool
msgParser	src/ofxJVisuals.hpp	/^  MsgParser *msgParser;$/;"	m	class:ofxJVisuals	typeref:typename:MsgParser *
name	src/mapValue.h	/^    string name = "";$/;"	m	class:mapValue	typeref:typename:string
namedview1763	exampleSimple/bin/data/test_0.svg	/^     showgrid="false" \/>$/;"	i
negative	src/ofxJVisuals.hpp	/^  ofShader negative;$/;"	m	class:ofxJVisuals	typeref:typename:ofShader
negativeLayer	src/ofxJVisuals.hpp	/^  JLayer negativeLayer;$/;"	m	class:ofxJVisuals	typeref:typename:JLayer
negativeMask	src/ofxJVisuals.hpp	/^  ofFbo negativeMask;$/;"	m	class:ofxJVisuals	typeref:typename:ofFbo
newXPos	src/Event/JVideoPlayer.hpp	/^    int newXPos;$/;"	m	class:Bin	typeref:typename:int
next	src/Event/JEvent.hpp	/^  JEvent *next = nullptr;$/;"	m	class:JEvent	typeref:typename:JEvent *
noisePP	src/ofxJVisuals.hpp	/^  NoiseWarpPass::Ptr noisePP = nullptr;$/;"	m	class:ofxJVisuals	typeref:typename:NoiseWarpPass::Ptr
noiseSeed	src/Event/JShaderTest.hpp	/^    int noiseSeed;$/;"	m	class:JShaderTest	typeref:typename:int
nscf4403e80101	exampleSimple/bin/data/test_0.svg	/^   xmlns:svg="http:\/\/www.w3.org\/2000\/svg">$/;"	n	uri:http://www.w3.org/2000/svg
numChildren	src/Event/JRectangle.hpp	/^    int numChildren = 0;$/;"	m	class:JRectangle	typeref:typename:int
numConnections	src/Event/dotsBlob.hpp	/^    char numConnections = 0;$/;"	m	class:dotsBlob	typeref:typename:char
numEvents	src/ofxJVisuals.hpp	/^  int numEvents = 0;$/;"	m	class:ofxJVisuals	typeref:typename:int
numEventsAdded	src/ofxJVisuals.hpp	/^  unsigned short numEventsAdded = 0;$/;"	m	class:ofxJVisuals	typeref:typename:unsigned short
numEventsPtr	src/Event/JEvent.hpp	/^  int *numEventsPtr = nullptr;$/;"	m	class:JEvent	typeref:typename:int *
numLines	src/JShaderLines.hpp	/^    float numLines = 108;$/;"	m	class:JShaderLines	typeref:typename:float
numMeshes	src/Event/MultiMesh.hpp	/^    int numMeshes=0;$/;"	m	class:MultiMesh	typeref:typename:int
numMeshes	src/Event/MultiMeshMaybeTomorrow.hpp	/^    int numMeshes=0;$/;"	m	class:MultiMeshMaybeTomorrow	typeref:typename:int
numParticles	src/Event/JPhysarum.hpp	/^    int numParticles;$/;"	m	class:JPhysarum	typeref:typename:int
numParticles	src/Event/particleSystem.h	/^    	int     numParticles;$/;"	m	class:particleSystem	typeref:typename:int
numParticles	src/Event/particleSystemOpenCL.hpp	/^    unsigned int numParticles = 1000000;$/;"	m	class:particleSystem	typeref:typename:unsigned int
numPoints	src/Event/JLine.hpp	/^    uint8 numPoints = 10;$/;"	m	class:JLine	typeref:typename:uint8
numSides	src/Event/JVorm.h	/^    uint8 numSides;$/;"	m	class:JVorm	typeref:typename:uint8
num_vertices_to_sphere	src/Event/SpaceCube.h	/^    int num_vertices_to_sphere = 0;$/;"	m	class:SpaceCube	typeref:typename:int
ofApp	exampleSimple/src/ofApp.h	/^class ofApp: public ofBaseApp{$/;"	c
ofApp	exampleSimpleTlFix/src/ofApp.h	/^class ofApp: public ofBaseApp{$/;"	c
offset	src/Event/JNoise.hpp	/^    ofVec2f offset = ofVec2f(0, 0);$/;"	m	class:JNoise	typeref:typename:ofVec2f
offset	src/Event/JVecField.hpp	/^    ofVec2f offset;$/;"	m	class:JVecField	typeref:typename:ofVec2f
offset	src/Event/SpaceCube.h	/^    ofVec3f offset;$/;"	m	class:SpaceCube	typeref:typename:ofVec3f
offset	src/Wavetable.h	/^    float offset=0;$/;"	m	class:Wavetable	typeref:typename:float
ofxJVisuals	README.md	/^ofxJVisuals$/;"	c
ofxJVisuals	src/ofxJVisuals.cpp	/^ofxJVisuals::ofxJVisuals(glm::vec2 size, bool bUseSC) : size(size) {$/;"	f	class:ofxJVisuals
ofxJVisuals	src/ofxJVisuals.hpp	/^class ofxJVisuals {$/;"	c
ofxJVisuals_hpp	src/ofxJVisuals.hpp	/^#define ofxJVisuals_hpp$/;"	d
onSuperColliderMessageReceived	src/MsgParser.cpp	/^void MsgParser::onSuperColliderMessageReceived($/;"	f	class:MsgParser	typeref:typename:void
opencl	src/Event/particleSystemOpenCL.hpp	/^    msa::OpenCL	opencl;$/;"	m	class:particleSystem	typeref:typename:msa::OpenCL
operator ()	src/Event/JEvent.hpp	/^    bool operator()(Env *a, Env *b) const { return a->value < b->value; }$/;"	f	struct:JEvent::__anonb680d16f0108	typeref:typename:bool
operator <	src/Env.hpp	/^    bool operator < (const Env& env) const$/;"	f	class:Env	typeref:typename:bool
operator []	src/Event/JPPBuffer.h	/^    ofFbo& operator[]( int n ){ return FBOs[n];}$/;"	f	struct:pingPongBuffer	typeref:typename:ofFbo &
operator []	src/ofxJVisuals.hpp	/^  JEvent &operator[](size_t i) { return this->at(i); }$/;"	f	class:JLayer	typeref:typename:JEvent &
orbitDistance	src/cameraController.hpp	/^    float orbitDistance = 500;$/;"	m	class:cameraController	typeref:typename:float
orbitSpeeds	src/cameraController.hpp	/^    ofVec3f orbitSpeeds = ofVec3f(0,0,0);$/;"	m	class:cameraController	typeref:typename:ofVec3f
orbitValues	src/cameraController.hpp	/^    ofVec3f orbitValues = ofVec3f(0,0,0);$/;"	m	class:cameraController	typeref:typename:ofVec3f
osx	addon_config.mk	/^osx:$/;"	t
ownDtor	src/Event/JEvent.hpp	/^  virtual void ownDtor(){};$/;"	f	class:JEvent	typeref:typename:void
ownDtor	src/Event/JRectangle.cpp	/^void JRectangle::ownDtor(){$/;"	f	class:JRectangle	typeref:typename:void
ownDtor	src/Event/JVideoPlayer.cpp	/^void JVideoPlayer::ownDtor(){$/;"	f	class:JVideoPlayer	typeref:typename:void
ownDtor	src/Event/JVorm.cpp	/^void JVorm::ownDtor(){$/;"	f	class:JVorm	typeref:typename:void
ownDtor	src/Event/SpaceCube.cpp	/^void SpaceCube::ownDtor(){ removeFromVector(); }$/;"	f	class:SpaceCube	typeref:typename:void
p	src/Event/JDivisionGrid.hpp	/^    ofPolyline p;$/;"	m	class:JPoly	typeref:typename:ofPolyline
p	src/Event/JVecField.hpp	/^    ofFloatPixels p;$/;"	m	class:JVecField	typeref:typename:ofFloatPixels
parentContainer	src/Event/JEvent.hpp	/^  vector<JEvent *> *parentContainer = nullptr;$/;"	m	class:JEvent	typeref:typename:vector<JEvent * > *
parentID	src/Env.hpp	/^    unsigned int* parentID = nullptr;$/;"	m	class:Env	typeref:typename:unsigned int *
parseBuffer	src/Event/JEvent.hpp	/^  virtual void parseBuffer(){};$/;"	f	class:JEvent	typeref:typename:void
parseBuffer	src/Event/JWaveform.cpp	/^void JWaveform::parseBuffer(){$/;"	f	class:JWaveform	typeref:typename:void
parseBuffer	src/JShader.cpp	/^void JShader::parseBuffer() {$/;"	f	class:JShader	typeref:typename:void
parseMsg	src/MsgParser.cpp	/^bool MsgParser::parseMsg(ofxOscMessage &m) {$/;"	f	class:MsgParser	typeref:typename:bool
particleCos	src/Event/particleSystemOpenCL.cpp	/^msa::OpenCLBufferManagedT<float4> particleCos;$/;"	v	typeref:typename:msa::OpenCLBufferManagedT<float4>
particlePos	src/Event/particleSystemOpenCL.cpp	/^msa::OpenCLBufferManagedT<float2> particlePos; \/\/ vector of particle positions on host and cor/;"	v	typeref:typename:msa::OpenCLBufferManagedT<float2>
particleSystem	src/Event/particleSystem.cpp	/^particleSystem::particleSystem(){$/;"	f	class:particleSystem
particleSystem	src/Event/particleSystem.cpp	/^particleSystem::particleSystem(int numParticles, glm::vec2 size) : numParticles(numParticles){$/;"	f	class:particleSystem
particleSystem	src/Event/particleSystem.h	/^class particleSystem: public JEvent{$/;"	c
particleSystem	src/Event/particleSystemOpenCL.cpp	/^particleSystem::particleSystem(){$/;"	f	class:particleSystem
particleSystem	src/Event/particleSystemOpenCL.cpp	/^particleSystem::particleSystem(int numParticles, ofVec2f size, ofFloatColor color, int testIndex/;"	f	class:particleSystem
particleSystem	src/Event/particleSystemOpenCL.hpp	/^class particleSystem: public JEvent{$/;"	c
particleSystemParticle	src/Event/particleSystemOpenCL.cpp	/^} particleSystemParticle;$/;"	t	typeref:struct:__anon240f87380108	file:
particleSystem_hpp	src/Event/particleSystem.h	/^#define particleSystem_hpp$/;"	d
particleSystem_hpp	src/Event/particleSystemOpenCL.hpp	/^#define particleSystem_hpp$/;"	d
particles	src/Event/JVorm.h	/^    vector<JParticle*> particles;$/;"	m	class:JVorm	typeref:typename:vector<JParticle * >
particles	src/Event/particleSystemOpenCL.cpp	/^msa::OpenCLBufferManagedT<particleSystemParticle> particles; \/\/ vector of Particles on host an/;"	v	typeref:typename:msa::OpenCLBufferManagedT<particleSystemParticle>
particlesPos	src/Event/particleSystemOpenCL.hpp	/^    float2* particlesPos;$/;"	m	class:particleSystem	typeref:typename:float2 *
particlesVisible	src/Event/JVorm.h	/^    bool particlesVisible = false;$/;"	m	class:JVorm	typeref:typename:bool
path	src/Event/JLine.hpp	/^    ofPath path;$/;"	m	class:JLine	typeref:typename:ofPath
path	src/Event/JVideoPlayer.hpp	/^    string path;$/;"	m	class:JVideoPlayer	typeref:typename:string
path	src/Event/JWaveform.hpp	/^    ofPath path;$/;"	m	class:JWaveform	typeref:typename:ofPath
percent	src/Event/dotsBlob.hpp	/^    float percent = 1.0;$/;"	m	class:dotsBlob	typeref:typename:float
phase	src/Event/JVecField.hpp	/^    float phase = TWO_PI;$/;"	m	class:JVecField	typeref:typename:float
phase	src/Wavetable.h	/^    float phase = 0;$/;"	m	class:Wavetable	typeref:typename:float
pingPongBuffer	src/Event/JPPBuffer.h	/^struct pingPongBuffer {$/;"	s
pixels	src/Event/particleSystemOpenCL.hpp	/^    unsigned char* pixels;$/;"	m	class:particleSystem	typeref:typename:unsigned char *
placeNewPoint	src/Event/SpaceCube.cpp	/^void SpaceCube::placeNewPoint(ofVec3f loc, bool random){$/;"	f	class:SpaceCube	typeref:typename:void
placeVertexOnRadius	src/Event/SpaceCube.cpp	/^void SpaceCube::placeVertexOnRadius(float radius){$/;"	f	class:SpaceCube	typeref:typename:void
play	src/Event/JVideoPlayer.cpp	/^void JVideoPlayer::play(float pct){$/;"	f	class:JVideoPlayer	typeref:typename:void
player	src/Event/JVideoPlayer.hpp	/^    ofVideoPlayer player;$/;"	m	class:JVideoPlayer	typeref:typename:ofVideoPlayer
playing	src/Event/JVideoPlayer.hpp	/^    bool playing = false;$/;"	m	class:JVideoPlayer	typeref:typename:bool
pointsAmount	src/Event/SpaceCube.h	/^    int pointsAmount = 0;$/;"	m	class:SpaceCube	typeref:typename:int
polyBlob	src/Event/dotsBlob.hpp	/^    ofPolyline polyBlob;$/;"	m	class:dotsBlob	typeref:typename:ofPolyline
polyVec	src/Event/JDivisionGrid.hpp	/^    vector<JPoly*> polyVec;$/;"	m	class:JDivisionGrid	typeref:typename:vector<JPoly * >
pos	src/Event/JDivisionGrid.hpp	/^    glm::vec3 pos;$/;"	m	class:JPoly	typeref:typename:glm::vec3
posPingPong	src/Event/JPhysarum.hpp	/^    pingPongBuffer posPingPong;$/;"	m	class:JPhysarum	typeref:typename:pingPongBuffer
posPingPong	src/Event/particleSystem.h	/^    	pingPongBuffer posPingPong;$/;"	m	class:particleSystem	typeref:typename:pingPongBuffer
post	src/ofxJVisuals.hpp	/^  ofxPostProcessing post;$/;"	m	class:ofxJVisuals	typeref:typename:ofxPostProcessing
prepare	src/Event/JDivisionGrid.hpp	/^    void prepare(){$/;"	f	class:JPoly	typeref:typename:void
prepareForSave	src/Event/JDivisionGrid.hpp	/^    void prepareForSave() override{$/;"	f	class:JPoly	typeref:typename:void
prepareForSave	src/Event/JMesh.cpp	/^void JMesh::prepareForSave(){$/;"	f	class:JMesh	typeref:typename:void
prev_type	src/Event/SpaceCube.h	/^    int prev_type;$/;"	m	class:SpaceCube	typeref:typename:int
previous	src/Event/JEvent.hpp	/^  JEvent *previous = nullptr;$/;"	m	class:JEvent	typeref:typename:JEvent *
printTable	src/Wavetable.cpp	/^void Wavetable::printTable(){$/;"	f	class:Wavetable	typeref:typename:void
process	src/Env.cpp	/^bool Env::process(bool bWrite){$/;"	f	class:Env	typeref:typename:bool
process	src/Wavetable.cpp	/^float Wavetable::process(){$/;"	f	class:Wavetable	typeref:typename:float
ptr	src/Env.hpp	/^    Pointer* ptr = nullptr;;$/;"	m	class:Env	typeref:typename:Pointer *
pulseMoveWidth	src/Event/MultiMesh.hpp	/^    int pulseMoveWidth; int centerPulseRadius = 50;$/;"	m	class:MultiMesh	typeref:typename:int
pulseMoveWidth	src/Event/MultiMeshMaybeTomorrow.hpp	/^    int pulseMoveWidth; int centerPulseRadius = 50;$/;"	m	class:MultiMeshMaybeTomorrow	typeref:typename:int
pulseOsc	src/Event/MultiMesh.hpp	/^    void moveWithPulse(); Wavetable* pulseOsc;$/;"	m	class:MultiMesh	typeref:typename:Wavetable *
pulseOsc	src/Event/MultiMeshMaybeTomorrow.hpp	/^    bool bMoveWithPulse = false; void moveWithPulse(); Wavetable* pulseOsc;$/;"	m	class:MultiMeshMaybeTomorrow	typeref:typename:Wavetable *
pulseWidth	src/Wavetable.h	/^    float pulseWidth=0.5;$/;"	m	class:Wavetable	typeref:typename:float
r	src/Event/JPrimitive.hpp	/^    float r(){$/;"	f	class:JCircle	typeref:typename:float
r	src/Event/dotsBlob.hpp	/^    float r = ofRandom(10, 50);$/;"	m	struct:dotsCircle	typeref:typename:float
r	src/scSynth.hpp	/^    string r = "";$/;"	m	class:scSynth	typeref:typename:string
radius	src/Event/JVorm.h	/^    float radius, angle, angleOffset;$/;"	m	class:JVorm	typeref:typename:float
radius	src/Event/MultiMesh.hpp	/^    float radius;$/;"	m	class:MultiMesh	typeref:typename:float
radius	src/Event/MultiMeshMaybeTomorrow.hpp	/^    float radius;$/;"	m	class:MultiMeshMaybeTomorrow	typeref:typename:float
radius	src/Event/SpaceCube.h	/^    float radius;$/;"	m	class:SpaceCube	typeref:typename:float
radiusAdd	src/Event/MultiMesh.hpp	/^    float radiusAdd = 3;$/;"	m	class:MultiMesh	typeref:typename:float
radiusAdd	src/Event/MultiMeshMaybeTomorrow.hpp	/^    float radiusAdd = 3;$/;"	m	class:MultiMeshMaybeTomorrow	typeref:typename:float
randomBin	src/Event/JVideoPlayer.cpp	/^Bin* JVideoPlayer::randomBin(){$/;"	f	class:JVideoPlayer	typeref:typename:Bin *
randomChooseRotXorRotY	src/Event/SpaceCube.cpp	/^void SpaceCube::randomChooseRotXorRotY(){$/;"	f	class:SpaceCube	typeref:typename:void
randomFade	src/Event/JVideoPlayer.cpp	/^void JVideoPlayer::randomFade(){$/;"	f	class:JVideoPlayer	typeref:typename:void
randomMirror	src/Event/JVideoPlayer.cpp	/^void JVideoPlayer::randomMirror(bool h, bool v){$/;"	f	class:JVideoPlayer	typeref:typename:void
randomizeDirections	src/Event/RectangleMask.cpp	/^void RectangleMask::randomizeDirections(){$/;"	f	class:RectangleMask	typeref:typename:void
randomizeSpeeds	src/Event/RectangleMask.cpp	/^void RectangleMask::randomizeSpeeds(){$/;"	f	class:RectangleMask	typeref:typename:void
range	src/Event/dotsBlob.hpp	/^    float range = 50;$/;"	m	class:dotsBlob	typeref:typename:float
reSpawn	src/Event/JMirror.cpp	/^void JMirror::reSpawn(){$/;"	f	class:JMirror	typeref:typename:void
receiver	src/ofxJVisuals.hpp	/^  ofxOscReceiver receiver;$/;"	m	class:ofxJVisuals	typeref:typename:ofxOscReceiver
rect1882	exampleSimple/bin/data/test_0.svg	/^       \/>$/;"	i
rects	src/Event/RectangleMask.hpp	/^    vector<JRectangle*> rects;$/;"	m	class:RectangleMask	typeref:typename:vector<JRectangle * >
removeConnection	src/Event/JVorm.cpp	/^void JVorm::removeConnection(JVorm* v){$/;"	f	class:JVorm	typeref:typename:void
removeFromVector	src/Event/JRectangle.cpp	/^void JRectangle::removeFromVector(){$/;"	f	class:JRectangle	typeref:typename:void
removeFromVector	src/Event/JVorm.cpp	/^void JVorm::removeFromVector(){$/;"	f	class:JVorm	typeref:typename:void
removeFromVector	src/Event/SpaceCube.cpp	/^void SpaceCube::removeFromVector(){$/;"	f	class:SpaceCube	typeref:typename:void
removeLastVertex	src/Event/SpaceCube.cpp	/^void SpaceCube::removeLastVertex(){$/;"	f	class:SpaceCube	typeref:typename:void
renderFBO	src/Event/particleSystem.h	/^    	ofFbo   renderFBO;$/;"	m	class:particleSystem	typeref:typename:ofFbo
renderFbo	src/ofxJVisuals.hpp	/^  ofFbo fbo, renderFbo;$/;"	m	class:ofxJVisuals	typeref:typename:ofFbo
renderPingPong	src/Event/JPhysarum.hpp	/^    pingPongBuffer renderPingPong;$/;"	m	class:JPhysarum	typeref:typename:pingPongBuffer
resizeFbo	src/Event/JVecField.hpp	/^    ofFbo resizeFbo; \/\/ TEST$/;"	m	class:JVecField	typeref:typename:ofFbo
retrigger	src/Wavetable.cpp	/^void Wavetable::retrigger(){$/;"	f	class:Wavetable	typeref:typename:void
rgbPP	src/ofxJVisuals.hpp	/^  RGBShiftPass::Ptr rgbPP = nullptr;$/;"	m	class:ofxJVisuals	typeref:typename:RGBShiftPass::Ptr
rgba	src/Event/JEventBase.hpp	/^  glm::vec4 rgba = {255, 255, 255, 1.0};$/;"	m	class:JEventBase	typeref:typename:glm::vec4
rights	src/Event/RectangleMask.hpp	/^    vector<int> rights;$/;"	m	class:RectangleMask	typeref:typename:vector<int>
roi	src/Event/imageFloat.hpp	/^    ofVec2f roi, roiSpeed;$/;"	m	class:imageFloater	typeref:typename:ofVec2f
roiSpeed	src/Event/imageFloat.hpp	/^    ofVec2f roi, roiSpeed;$/;"	m	class:imageFloater	typeref:typename:ofVec2f
rotX	src/Event/SpaceCube.h	/^    bool rotX = false;$/;"	m	class:SpaceCube	typeref:typename:bool
rotY	src/Event/SpaceCube.h	/^    bool rotY = false;$/;"	m	class:SpaceCube	typeref:typename:bool
rotateCoordinates	src/Event/JVorm.cpp	/^void JVorm::rotateCoordinates(int places, int direction){$/;"	f	class:JVorm	typeref:typename:void
rotateRotationSpeed	src/Event/SpaceCube.cpp	/^void SpaceCube::rotateRotationSpeed(){$/;"	f	class:SpaceCube	typeref:typename:void
rotateSpeed	src/cameraController.hpp	/^    ofVec3f rotateSpeed = ofVec3f(0,0,0);$/;"	m	class:cameraController	typeref:typename:ofVec3f
rotateX	src/Event/SpaceCube.cpp	/^void SpaceCube::rotateX(){$/;"	f	class:SpaceCube	typeref:typename:void
rotateY	src/Event/SpaceCube.cpp	/^void SpaceCube::rotateY(){$/;"	f	class:SpaceCube	typeref:typename:void
rotating	src/Event/JVorm.h	/^    bool rotating = false;$/;"	m	class:JVorm	typeref:typename:bool
rotation	src/Event/JEventBase.hpp	/^  glm::vec3 rotation = {0, 0, 0};$/;"	m	class:JEventBase	typeref:typename:glm::vec3
rotation	src/Event/JLine.hpp	/^    float rotation = 0;$/;"	m	class:JLine	typeref:typename:float
rotation	src/Event/dotsBlob.hpp	/^    float rotation = ofRandom(360.);$/;"	m	struct:dotsCircle	typeref:typename:float
rotation	src/cameraController.hpp	/^    ofVec3f rotation = ofVec3f(0,0,0);$/;"	m	class:cameraController	typeref:typename:ofVec3f
rotationAngle	src/ofxJVisuals.hpp	/^  float rotationAngle = 0;$/;"	m	class:ofxJVisuals	typeref:typename:float
rotationAngleIcrement	src/ofxJVisuals.hpp	/^  float rotationAngleIcrement = 0.1;$/;"	m	class:ofxJVisuals	typeref:typename:float
rotationLeft	src/Event/dotsBlob.hpp	/^    float rotationLeft = 0;$/;"	m	class:dotsBlob	typeref:typename:float
rotationRight	src/Event/dotsBlob.hpp	/^    float rotationRight = 0;$/;"	m	class:dotsBlob	typeref:typename:float
rotationSpeed	src/cameraController.hpp	/^    ofVec3f rotationSpeed = ofVec3f(0,0,0);$/;"	m	class:cameraController	typeref:typename:ofVec3f
rotation_direction	src/Event/SpaceCube.h	/^    int rotation_direction = 1;$/;"	m	class:SpaceCube	typeref:typename:int
rotation_speed	src/Event/SpaceCube.h	/^    float rotation_speed;$/;"	m	class:SpaceCube	typeref:typename:float
rotation_speeds	src/Event/SpaceCube.h	/^    float rotation_speeds[4] = {2.5, 3.75, 5.0, 7.5};$/;"	m	class:SpaceCube	typeref:typename:float[4]
rotation_speeds_iterator	src/Event/SpaceCube.h	/^    int rotation_speeds_iterator = 0;$/;"	m	class:SpaceCube	typeref:typename:int
round	src/Event/meshLandscape.cpp	/^void meshLandscape::round(){$/;"	f	class:meshLandscape	typeref:typename:void
s	exampleSimple/src/ofApp.h	/^		ofShader s;$/;"	m	class:ofApp	typeref:typename:ofShader
s	exampleSimpleTlFix/src/ofApp.h	/^		ofShader s;$/;"	m	class:ofApp	typeref:typename:ofShader
s	src/JShader.hpp	/^  ofShader s;$/;"	m	class:JShader	typeref:typename:ofShader
save	src/Event/JDivisionGrid.hpp	/^    void save() override{$/;"	f	class:JPoly	typeref:typename:void
save	src/Event/JMesh.cpp	/^void JMesh::save(){$/;"	f	class:JMesh	typeref:typename:void
saveBuffer	src/Env.hpp	/^    float* saveBuffer = nullptr;$/;"	m	class:Env	typeref:typename:float *
saveBufferSize	src/Env.hpp	/^    int saveBufferSize = 0;$/;"	m	class:Env	typeref:typename:int
saveBufferWritePos	src/Env.hpp	/^    int saveBufferWritePos = 0;$/;"	m	class:Env	typeref:typename:int
saveValueToBuffer	src/Env.cpp	/^void Env::saveValueToBuffer(float v){$/;"	f	class:Env	typeref:typename:void
scClient	src/MsgParser.hpp	/^    ofxOscSenderReceiver scClient;$/;"	m	class:MsgParser	typeref:typename:ofxOscSenderReceiver
scSynth	src/scSynth.hpp	/^class scSynth: public ofThread{$/;"	c
scSynth_h	src/scSynth.hpp	/^#define scSynth_h$/;"	d
scaleFact	src/Event/JImage.hpp	/^  glm::vec2 scaleFact = glm::vec2(1.0);$/;"	m	class:JSvg	typeref:typename:glm::vec2
seed	src/Event/JLine.hpp	/^    float seed;$/;"	m	class:JLine	typeref:typename:float
seed	src/Event/JNoise.hpp	/^    float seed;$/;"	m	class:JNoise	typeref:typename:float
seed	src/Event/JVecField.hpp	/^    int seed = 0;$/;"	m	class:JVecField	typeref:typename:int
seed	src/Event/dotsBlob.hpp	/^    float seed;$/;"	m	class:dotsBlob	typeref:typename:float
segmentLength	src/Event/dotsBlob.hpp	/^    int segmentLength = 2;$/;"	m	class:dotsBlob	typeref:typename:int
selectedFont	src/ofxJVisuals.hpp	/^  ofTrueTypeFont *selectedFont;$/;"	m	class:ofxJVisuals	typeref:typename:ofTrueTypeFont *
sensorAngle	src/Event/JPhysarum.hpp	/^    float sensorAngle = 45;$/;"	m	class:JPhysarum	typeref:typename:float
sensorDistance	src/Event/JPhysarum.hpp	/^    float sensorDistance = 20;$/;"	m	class:JPhysarum	typeref:typename:float
setActiveness	src/AlphaBlackScreen.cpp	/^void AlphaBlackScreen::setActiveness(bool state){ \/\/ Weird ... @02-2020$/;"	f	class:AlphaBlackScreen	typeref:typename:void
setAlpha	src/AlphaBlackScreen.cpp	/^void AlphaBlackScreen::setAlpha(int alpha){$/;"	f	class:AlphaBlackScreen	typeref:typename:void
setAlpha	src/Event/JEvent.cpp	/^void JEvent::setAlpha(unsigned char alpha){$/;"	f	class:JEvent	typeref:typename:void
setAlpha	src/Event/JRectangle.cpp	/^void JRectangle::setAlpha(unsigned char alpha){$/;"	f	class:JRectangle	typeref:typename:void
setAlpha	src/ofxJVisuals.cpp	/^void MsgParser::setAlpha(float a) { v->setAlpha(a); }$/;"	f	class:MsgParser	typeref:typename:void
setAlpha	src/ofxJVisuals.cpp	/^void ofxJVisuals::setAlpha(int alpha, bool bDo) {$/;"	f	class:ofxJVisuals	typeref:typename:void
setBins	src/Event/JVideoPlayer.cpp	/^void JVideoPlayer::setBins(int numBins){$/;"	f	class:JVideoPlayer	typeref:typename:void
setBrightness	src/ofxJVisuals.cpp	/^void MsgParser::setBrightness(float b) { v->setBrightness(b); }$/;"	f	class:MsgParser	typeref:typename:void
setBrightness	src/ofxJVisuals.cpp	/^void ofxJVisuals::setBrightness(unsigned char b) { brightness = b; }$/;"	f	class:ofxJVisuals	typeref:typename:void
setBuffer	src/MsgParser.cpp	/^bool MsgParser::setBuffer(ofxOscMessage &m) {$/;"	f	class:MsgParser	typeref:typename:bool
setCameraState	src/ofxJVisuals.cpp	/^void MsgParser::setCameraState(bool bState) { v->bCam = bState; }$/;"	f	class:MsgParser	typeref:typename:void
setCenter	src/Event/JVorm.cpp	/^void JVorm::setCenter(glm::vec3 newLoc){$/;"	f	class:JVorm	typeref:typename:void
setCirclularMaskState	src/ofxJVisuals.cpp	/^void MsgParser::setCirclularMaskState(bool bState) {$/;"	f	class:MsgParser	typeref:typename:void
setColor	src/Event/JDivisionGrid.cpp	/^void JDivisionGrid::setColor(ofColor c){$/;"	f	class:JDivisionGrid	typeref:typename:void
setColor	src/Event/JEvent.cpp	/^void JEvent::setColor(ofColor color){$/;"	f	class:JEvent	typeref:typename:void
setColor	src/Event/particleSystemOpenCL.cpp	/^void particleSystem::setColor(ofColor c, int index){$/;"	f	class:particleSystem	typeref:typename:void
setDefaultMappers	src/Event/JEvent.cpp	/^void JEvent::setDefaultMappers(){$/;"	f	class:JEvent	typeref:typename:void
setDensity	src/Event/JVecField.cpp	/^void JVecField::setDensity(glm::vec2 d, char numChannels){$/;"	f	class:JVecField	typeref:typename:void
setEndTime	src/Event/JEvent.cpp	/^void JEvent::setEndTime(float duration){$/;"	f	class:JEvent	typeref:typename:void
setEnvelope	src/Event/JEvent.cpp	/^void JEvent::setEnvelope(int attack, int sustain, int release, float* value, ofVec2f range, int /;"	f	class:JEvent	typeref:typename:void
setEnvelope	src/Event/JEvent.cpp	/^void JEvent::setEnvelope(int attack, int sustain, int release, int* value, ofVec2f range){ \/\/ /;"	f	class:JEvent	typeref:typename:void
setEnvelope	src/Event/JEvent.cpp	/^void JEvent::setEnvelope(int attack, int sustain, int release, ofVec2f range){ \/\/ Link envelop/;"	f	class:JEvent	typeref:typename:void
setFrequency	src/Event/MultiMesh.cpp	/^void MultiMesh::setFrequency(float freq, float a, float b, float c){$/;"	f	class:MultiMesh	typeref:typename:void
setFrequency	src/Event/MultiMesh.cpp	/^void MultiMesh::setFrequency(float freq, float* multipliers, int size){$/;"	f	class:MultiMesh	typeref:typename:void
setFrequency	src/Event/MultiMeshMaybeTomorrow.cpp	/^void MultiMeshMaybeTomorrow::setFrequency(float freq, float* multipliers, int size){$/;"	f	class:MultiMeshMaybeTomorrow	typeref:typename:void
setHeight	src/Event/JRectangle.cpp	/^void JRectangle::setHeight(int height){ size.y = height; }$/;"	f	class:JRectangle	typeref:typename:void
setLoc	src/Event/JEvent.cpp	/^void JEvent::setLoc(glm::vec3 loc){this->loc = loc;}$/;"	f	class:JEvent	typeref:typename:void
setLoc	src/Event/JLine.cpp	/^void JLine::setLoc(glm::vec3 loc){$/;"	f	class:JLine	typeref:typename:void
setLoc	src/Event/JMesh.cpp	/^void JMesh::setLoc(glm::vec3 loc){$/;"	f	class:JMesh	typeref:typename:void
setLoc	src/Event/JVorm.cpp	/^void JVorm::setLoc(glm::vec3 newLoc){ \/\/ Get distance from new loc$/;"	f	class:JVorm	typeref:typename:void
setLocation	src/Event/MultiMesh.cpp	/^void MultiMesh::setLocation(int index, int index2, ofVec2f loc){$/;"	f	class:MultiMesh	typeref:typename:void
setLoop	src/Env.cpp	/^void Env::setLoop(bool b){$/;"	f	class:Env	typeref:typename:void
setLoopPoint	src/Event/JVideoPlayer.cpp	/^void JVideoPlayer::setLoopPoint(int point){$/;"	f	class:JVideoPlayer	typeref:typename:void
setMode	src/Event/JEvent.cpp	/^void JEvent::setMode(char m){ mode = m; }$/;"	f	class:JEvent	typeref:typename:void
setMode	src/Event/JVecField.cpp	/^void JVecField::setMode(char m){$/;"	f	class:JVecField	typeref:typename:void
setMode	src/Event/JVideoPlayer.cpp	/^void JVideoPlayer::setMode(int mode){$/;"	f	class:JVideoPlayer	typeref:typename:void
setMode	src/Event/SpaceCube.cpp	/^void SpaceCube::setMode(char m){$/;"	f	class:SpaceCube	typeref:typename:void
setMode	src/Wavetable.cpp	/^void Wavetable::setMode(int mode){ \/\/ 0: sin, 1: cos, 2 square, 3 impulse, 4 triangle$/;"	f	class:Wavetable	typeref:typename:void
setPixelsToTest	src/Event/JVecField.cpp	/^void JVecField::setPixelsToTest(){$/;"	f	class:JVecField	typeref:typename:void
setQuadColor	src/Event/JRectangle.cpp	/^void JRectangle::setQuadColor(ofColor a, ofColor b, ofColor c, ofColor d){$/;"	f	class:JRectangle	typeref:typename:void
setSave	src/Env.cpp	/^void Env::setSave(){$/;"	f	class:Env	typeref:typename:void
setSize	src/Event/JEvent.cpp	/^void JEvent::setSize(glm::vec3 s){size = s;}$/;"	f	class:JEvent	typeref:typename:void
setSize	src/Event/JEvent.hpp	/^  virtual void setSize(glm::vec2 s) { setSize(glm::vec3(s, 0)); }$/;"	f	class:JEvent	typeref:typename:void
setSize	src/Event/JImage.cpp	/^void JImage::setSize(glm::vec3 size){$/;"	f	class:JImage	typeref:typename:void
setSize	src/Event/JImage.hpp	/^  void setSize(glm::vec3 size){$/;"	f	class:JSvg	typeref:typename:void
setSize	src/Event/JLine.cpp	/^void JLine::setSize(glm::vec3 size){$/;"	f	class:JLine	typeref:typename:void
setSize	src/Event/JMesh.cpp	/^void JMesh::setSize(glm::vec3 size){$/;"	f	class:JMesh	typeref:typename:void
setSize	src/Event/JMirror.cpp	/^void JMirror::setSize(glm::vec3 s){$/;"	f	class:JMirror	typeref:typename:void
setSize	src/Event/JVecField.cpp	/^void JVecField::setSize(glm::vec3 size){$/;"	f	class:JVecField	typeref:typename:void
setSize	src/Event/particleSystemOpenCL.cpp	/^void particleSystem::setSize(glm::vec3 size){$/;"	f	class:particleSystem	typeref:typename:void
setSpeed	src/Event/JEvent.cpp	/^void JEvent::setSpeed(float speed){this->speed = speed;}$/;"	f	class:JEvent	typeref:typename:void
setSpeed	src/Event/MultiMesh.cpp	/^void MultiMesh::setSpeed(float speed){$/;"	f	class:MultiMesh	typeref:typename:void
setStartTime	src/Env.cpp	/^void Env::setStartTime(){$/;"	f	class:Env	typeref:typename:void
setStartTime	src/Event/JEvent.cpp	/^void JEvent::setStartTime(){$/;"	f	class:JEvent	typeref:typename:void
setState	src/Event/JVorm.cpp	/^void JVorm::setState(bool state){$/;"	f	class:JVorm	typeref:typename:void
setText	src/Event/JText.cpp	/^void JText::setText(string txt){$/;"	f	class:JText	typeref:typename:void
setType	src/Event/JEvent.cpp	/^void JEvent::setType(string type){$/;"	f	class:JEvent	typeref:typename:void
setVal	src/MsgParser.cpp	/^void MsgParser::setVal($/;"	f	class:MsgParser	typeref:typename:void
setVal	src/mapValue.h	/^    void setVal(float v){$/;"	f	class:mapValue	typeref:typename:void
setVal	src/mapValue.h	/^    void setVal(int v){$/;"	f	class:mapValue	typeref:typename:void
setValuesFromFloatArray	src/Event/JEventBase.hpp	/^  void setValuesFromFloatArray(float *a) {$/;"	f	class:JEventBase	typeref:typename:void
setVecField	src/Event/particleSystem.cpp	/^void particleSystem::setVecField(JVecField* vF){$/;"	f	class:particleSystem	typeref:typename:void
setVecField	src/Event/particleSystemOpenCL.cpp	/^void particleSystem::setVecField(JVecField* vF){$/;"	f	class:particleSystem	typeref:typename:void
setViaBusses	src/Event/JEvent.hpp	/^  virtual void setViaBusses(vector<float> busses){};$/;"	f	class:JEvent	typeref:typename:void
setWidth	src/Event/JRectangle.cpp	/^void JRectangle::setWidth(int width){ size.x = width; }$/;"	f	class:JRectangle	typeref:typename:void
setZ	src/Event/JVorm.cpp	/^void JVorm::setZ(int z){$/;"	f	class:JVorm	typeref:typename:void
setup	exampleSimple/src/ofApp.cpp	/^void ofApp::setup() {$/;"	f	class:ofApp	typeref:typename:void
setup	exampleSimpleTlFix/src/ofApp.cpp	/^void ofApp::setup(){$/;"	f	class:ofApp	typeref:typename:void
setup	src/scSynth.hpp	/^    void setup(){$/;"	f	class:scSynth	typeref:typename:void
shader	src/Event/JShaderTest.hpp	/^    ofShader shader;$/;"	m	class:JShaderTest	typeref:typename:ofShader
shaders	src/ofxJVisuals.hpp	/^  vector<JShader *> shaders;$/;"	m	class:ofxJVisuals	typeref:typename:vector<JShader * >
sideDiv	src/Event/JVorm.h	/^    float sideDiv;$/;"	m	class:JVorm	typeref:typename:float
size	src/Event/JEventBase.hpp	/^  glm::vec3 size = {100, 100, 100};$/;"	m	class:JEventBase	typeref:typename:glm::vec3
size	src/ofxJVisuals.hpp	/^  glm::vec2 size;$/;"	m	class:ofxJVisuals	typeref:typename:glm::vec2
sizeMultiplier	src/Event/JVecField.hpp	/^    ofVec2f sizeMultiplier;$/;"	m	class:JVecField	typeref:typename:ofVec2f
skip	src/Event/meshLandscape.hpp	/^    int skip = 8;$/;"	m	class:meshLandscape	typeref:typename:int
sodipodi	exampleSimple/bin/data/test_0.svg	/^   xmlns:svg="http:\/\/www.w3.org\/2000\/svg">$/;"	n	uri:http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd
sortAndSplit	src/Event/JDivisionGrid.cpp	/^void JDivisionGrid::sortAndSplit(){$/;"	f	class:JDivisionGrid	typeref:typename:void
sortByAreaSize	src/Event/JDivisionGrid.cpp	/^bool sortByAreaSize(JPoly* a, JPoly* b){$/;"	f	typeref:typename:bool
spacing	src/modifiers/JModifierArray.hpp	/^    float* spacing[2];$/;"	m	class:JModifierArray	typeref:typename:float * [2]
spawnPos	src/Event/JDivisionGrid.hpp	/^    ofPoint spawnPos;$/;"	m	class:JPoly	typeref:typename:ofPoint
spawnPos	src/Event/particleSystemOpenCL.cpp	/^    float2 spawnPos;$/;"	m	struct:__anon240f87380108	typeref:typename:float2	file:
specificFunction	src/AlphaBlackScreen.cpp	/^void AlphaBlackScreen::specificFunction(){$/;"	f	class:AlphaBlackScreen	typeref:typename:void
specificFunction	src/Event/JDivisionGrid.cpp	/^void JDivisionGrid::specificFunction(){$/;"	f	class:JDivisionGrid	typeref:typename:void
specificFunction	src/Event/JEvent.hpp	/^  virtual void specificFunction() { return; };$/;"	f	class:JEvent	typeref:typename:void
specificFunction	src/Event/JImage.cpp	/^void JImage::specificFunction(){$/;"	f	class:JImage	typeref:typename:void
specificFunction	src/Event/JLine.cpp	/^void JLine::specificFunction(){$/;"	f	class:JLine	typeref:typename:void
specificFunction	src/Event/JMesh.cpp	/^void JMesh::specificFunction(){$/;"	f	class:JMesh	typeref:typename:void
specificFunction	src/Event/JMirror.cpp	/^void JMirror::specificFunction(){$/;"	f	class:JMirror	typeref:typename:void
specificFunction	src/Event/JPhysarum.cpp	/^void JPhysarum::specificFunction(){$/;"	f	class:JPhysarum	typeref:typename:void
specificFunction	src/Event/JPrimitive.hpp	/^    virtual void specificFunction(){};$/;"	f	class:JPrimitive	typeref:typename:void
specificFunction	src/Event/JPrimitive.hpp	/^    void specificFunction() override{$/;"	f	class:JCircle	typeref:typename:void
specificFunction	src/Event/JRectangle.cpp	/^void JRectangle::specificFunction(){$/;"	f	class:JRectangle	typeref:typename:void
specificFunction	src/Event/JShaderTest.cpp	/^void JShaderTest::specificFunction(){$/;"	f	class:JShaderTest	typeref:typename:void
specificFunction	src/Event/JVecField.cpp	/^void JVecField::specificFunction(){$/;"	f	class:JVecField	typeref:typename:void
specificFunction	src/Event/JVideoPlayer.cpp	/^void Bin::specificFunction(){$/;"	f	class:Bin	typeref:typename:void
specificFunction	src/Event/JVideoPlayer.cpp	/^void JVideoPlayer::specificFunction(){$/;"	f	class:JVideoPlayer	typeref:typename:void
specificFunction	src/Event/JVorm.cpp	/^void JVorm::specificFunction(){$/;"	f	class:JVorm	typeref:typename:void
specificFunction	src/Event/JWaveform.cpp	/^void JWaveform::specificFunction(){$/;"	f	class:JWaveform	typeref:typename:void
specificFunction	src/Event/MultiMesh.cpp	/^void MultiMesh::specificFunction(){$/;"	f	class:MultiMesh	typeref:typename:void
specificFunction	src/Event/MultiMeshMaybeTomorrow.cpp	/^void MultiMeshMaybeTomorrow::specificFunction(){$/;"	f	class:MultiMeshMaybeTomorrow	typeref:typename:void
specificFunction	src/Event/RectangleMask.cpp	/^void RectangleMask::specificFunction(){$/;"	f	class:RectangleMask	typeref:typename:void
specificFunction	src/Event/SpaceCube.cpp	/^void SpaceCube::specificFunction(){$/;"	f	class:SpaceCube	typeref:typename:void
specificFunction	src/Event/meshLandscape.cpp	/^void meshLandscape::specificFunction(){$/;"	f	class:meshLandscape	typeref:typename:void
specificFunction	src/Event/particleSystem.cpp	/^void particleSystem::specificFunction(){$/;"	f	class:particleSystem	typeref:typename:void
specificFunction	src/Event/particleSystemOpenCL.cpp	/^void particleSystem::specificFunction(){$/;"	f	class:particleSystem	typeref:typename:void
specificFunction	src/cameraController.cpp	/^void cameraController::specificFunction(){$/;"	f	class:cameraController	typeref:typename:void
speed	src/Event/JEventBase.hpp	/^  float speed = 1;$/;"	m	class:JEventBase	typeref:typename:float
speed	src/Event/JMirror.h	/^    float speed;$/;"	m	class:JMirror	typeref:typename:float
speed	src/Event/JParticle.h	/^    float* speed = nullptr;$/;"	m	class:JParticle	typeref:typename:float *
speed	src/Event/dotsBlob.hpp	/^    float speed = 0;$/;"	m	class:dotsBlob	typeref:typename:float
speed	src/Event/dotsBlob.hpp	/^    float speed = ofRandom(0.1, 1.0);$/;"	m	struct:dotsCircle	typeref:typename:float
split	src/Event/JDivisionGrid.hpp	/^    bool split(vector<JPoly*>* rects){$/;"	f	class:JPoly	typeref:typename:bool
src	src/Event/JPPBuffer.h	/^    ofFbo   *src;       \/\/ Source       ->  Ping$/;"	m	struct:pingPongBuffer	typeref:typename:ofFbo *
src	src/Event/JShaderTest.hpp	/^    ofFbo src;$/;"	m	class:JShaderTest	typeref:typename:ofFbo
start	src/Event/JVecField.hpp	/^    ofVec2f start, end; \/\/ For each line$/;"	m	class:JVecField	typeref:typename:ofVec2f
start	src/scSynth.hpp	/^    void start(){$/;"	f	class:scSynth	typeref:typename:void
startFromLoopPoint	src/Event/JVideoPlayer.cpp	/^void JVideoPlayer::startFromLoopPoint(){$/;"	f	class:JVideoPlayer	typeref:typename:void
startPointRotation	src/Event/dotsBlob.hpp	/^    float startPointRotation = 0;$/;"	m	class:dotsBlob	typeref:typename:float
startSide	src/Event/JDivisionGrid.hpp	/^    int startSide;$/;"	m	class:JPoly	typeref:typename:int
startTime	src/Env.hpp	/^    int startTime;$/;"	m	class:Env	typeref:typename:int
startTime	src/Event/JEvent.hpp	/^  unsigned int startTime = 0;$/;"	m	class:JEvent	typeref:typename:unsigned int
state	src/Event/JParticle.h	/^    bool state = false;$/;"	m	class:JParticle	typeref:typename:bool
stop	src/scSynth.hpp	/^    void stop(){$/;"	f	class:scSynth	typeref:typename:void
subID	src/Event/JEventBase.hpp	/^  unsigned int subID = 0;$/;"	m	class:JEventBase	typeref:typename:unsigned int
svg	exampleSimple/bin/data/test_0.svg	/^   xmlns:svg="http:\/\/www.w3.org\/2000\/svg">$/;"	n	uri:http://www.w3.org/2000/svg
svg	src/Event/JImage.hpp	/^    JSvg* svg = nullptr;$/;"	m	class:JImage	typeref:typename:JSvg *
svg	src/Event/JImage.hpp	/^  ofxSVG svg;$/;"	m	class:JSvg	typeref:typename:ofxSVG
svg1761	exampleSimple/bin/data/test_0.svg	/^   xmlns:svg="http:\/\/www.w3.org\/2000\/svg">$/;"	i
swap	src/Event/JPPBuffer.h	/^    void swap(){$/;"	f	struct:pingPongBuffer	typeref:typename:void
switchAllBinColor	src/Event/JVideoPlayer.cpp	/^void JVideoPlayer::switchAllBinColor(){$/;"	f	class:JVideoPlayer	typeref:typename:void
switchBinColor	src/Event/JVideoPlayer.cpp	/^void JVideoPlayer::switchBinColor(){$/;"	f	class:JVideoPlayer	typeref:typename:void
switchBinState	src/Event/JVideoPlayer.cpp	/^void JVideoPlayer::switchBinState(){$/;"	f	class:JVideoPlayer	typeref:typename:void
switchBins	src/Event/JVideoPlayer.cpp	/^void JVideoPlayer::switchBins(vector<int> array){$/;"	f	class:JVideoPlayer	typeref:typename:void
switchConnectableness	src/Event/JVorm.cpp	/^void JVorm::switchConnectableness(){$/;"	f	class:JVorm	typeref:typename:void
switchDilate	src/Event/JVideoPlayer.cpp	/^void JVideoPlayer::switchDilate(bool all){$/;"	f	class:JVideoPlayer	typeref:typename:void
switchMode	src/Event/MultiMesh.cpp	/^void MultiMesh::switchMode(){$/;"	f	class:MultiMesh	typeref:typename:void
switchRadiusses	src/Event/JVorm.cpp	/^void JVorm::switchRadiusses(JVorm* JVorm){$/;"	f	class:JVorm	typeref:typename:void
switchRandomBins	src/Event/JVideoPlayer.cpp	/^void JVideoPlayer::switchRandomBins(){$/;"	f	class:JVideoPlayer	typeref:typename:void
switchState	src/Event/JVorm.cpp	/^void JVorm::switchState(){$/;"	f	class:JVorm	typeref:typename:void
synth	src/MsgParser.hpp	/^    scSynth* synth;$/;"	m	class:MsgParser	typeref:typename:scSynth *
t	src/Event/JVecField.hpp	/^    float t;$/;"	m	class:JVecField	typeref:typename:float
texCoords	src/ofxJVisuals.hpp	/^  vector<glm::vec2> texCoords;$/;"	m	class:ofxJVisuals	typeref:typename:vector<glm::vec2>
texture	src/Event/JMirror.h	/^    ofTexture texture;$/;"	m	class:JMirror	typeref:typename:ofTexture
textureRes	src/Event/JPhysarum.hpp	/^    int textureRes;$/;"	m	class:JPhysarum	typeref:typename:int
textureRes	src/Event/particleSystem.h	/^    	int     textureRes;$/;"	m	class:particleSystem	typeref:typename:int
threadedFunction	src/scSynth.hpp	/^    void threadedFunction(){$/;"	f	class:scSynth	typeref:typename:void
timeStep	src/Event/particleSystem.h	/^    	float   timeStep;$/;"	m	class:particleSystem	typeref:typename:float
times	src/Env.hpp	/^    vector<float> times;$/;"	m	class:Env	typeref:typename:vector<float>
timesIndex	src/Env.hpp	/^    uint8 timesIndex = 0;$/;"	m	class:Env	typeref:typename:uint8
toClear	src/Event/JEvent.hpp	/^  vector<JEvent **> toClear;$/;"	m	class:JEvent	typeref:typename:vector<JEvent ** >
toRect	src/Event/JLine.cpp	/^void JLine::toRect(ofVec2f loc, ofVec2f size){$/;"	f	class:JLine	typeref:typename:void
topspeed	src/Event/JRectangle.hpp	/^    float topspeed = 1.0;$/;"	m	class:JRectangle	typeref:typename:float
totalRunTime	src/Env.hpp	/^    int totalRunTime = 0;$/;"	m	class:Env	typeref:typename:int
traagheid	src/Event/particleSystemOpenCL.hpp	/^    float traagheid = 0.9;$/;"	m	class:particleSystem	typeref:typename:float
translate	src/Event/meshLandscape.cpp	/^void meshLandscape::translate(ofVec3f t){$/;"	f	class:meshLandscape	typeref:typename:void
translation	src/Event/meshLandscape.hpp	/^    ofVec3f translation = ofVec3f(0,0,0);$/;"	m	class:meshLandscape	typeref:typename:ofVec3f
trigger	src/Env.cpp	/^void Env::trigger(vector<float> levels, vector<float> times){$/;"	f	class:Env	typeref:typename:void
trigger	src/MsgParser.cpp	/^bool MsgParser::trigger(ofxOscMessage &m) {$/;"	f	class:MsgParser	typeref:typename:bool
truckSpeed	src/cameraController.hpp	/^    float truckSpeed = 0;$/;"	m	class:cameraController	typeref:typename:float
turnAngle	src/Event/JPhysarum.hpp	/^    float turnAngle = 45;$/;"	m	class:JPhysarum	typeref:typename:float
tussenCoordinaten	src/Event/JVorm.cpp	/^void JVorm::tussenCoordinaten(){$/;"	f	class:JVorm	typeref:typename:void
txt	src/Event/JText.hpp	/^    string txt;$/;"	m	class:JText	typeref:typename:string
type	src/Event/JEvent.hpp	/^  string type = "JEvent";$/;"	m	class:JEvent	typeref:typename:string
type	src/Event/JEventBase.hpp	/^  jevent::JEventType type;$/;"	m	class:JEventBase	typeref:typename:jevent::JEventType
type	src/mapValue.h	/^    char type = 'f'; \/\/$/;"	m	class:mapValue	typeref:typename:char
types	src/MsgParser.hpp	/^    map<string, short> types;$/;"	m	class:MsgParser	typeref:typename:map<string,short>
uint16	src/Event/JVorm.cpp	/^typedef unsigned short uint16;$/;"	t	typeref:typename:unsigned short	file:
uint16	src/Event/JVorm.h	/^typedef unsigned short uint16;$/;"	t	class:JVorm	typeref:typename:unsigned short
uint16	src/Event/dotsBlob.hpp	/^typedef unsigned short uint16;$/;"	t	class:dotsBlob	typeref:typename:unsigned short
uint32	src/Event/meshLandscape.cpp	/^typedef unsigned int uint32;$/;"	t	typeref:typename:unsigned int	file:
uint8	src/Env.hpp	/^typedef unsigned char uint8;$/;"	t	class:Env	typeref:typename:unsigned char
uint8	src/Event/JLine.hpp	/^typedef unsigned char uint8;$/;"	t	typeref:typename:unsigned char
uint8	src/Event/JVorm.h	/^typedef unsigned char uint8;$/;"	t	class:JVorm	typeref:typename:unsigned char
uint8	src/ofxJVisuals.hpp	/^  typedef unsigned char uint8;$/;"	t	class:ofxJVisuals	typeref:typename:unsigned char
unConnect	src/Event/JVorm.cpp	/^void JVorm::unConnect(){ \/\/ Say to all connected objects: remove me from your vector$/;"	f	class:JVorm	typeref:typename:void
underlayer	src/Event/JVecField.hpp	/^    ofFbo* underlayer;$/;"	m	class:JVecField	typeref:typename:ofFbo *
update	exampleSimple/src/ofApp.cpp	/^void ofApp::update() {$/;"	f	class:ofApp	typeref:typename:void
update	exampleSimpleTlFix/src/ofApp.cpp	/^void ofApp::update(){$/;"	f	class:ofApp	typeref:typename:void
update	src/Event/JEvent.cpp	/^void JEvent::update(){$/;"	f	class:JEvent	typeref:typename:void
update	src/Event/JParticle.cpp	/^void JParticle::update(){$/;"	f	class:JParticle	typeref:typename:void
update	src/Event/dotsBlob.cpp	/^void dotsBlob::update(){$/;"	f	class:dotsBlob	typeref:typename:void
update	src/Event/dotsBlob.hpp	/^    void update(){};$/;"	f	class:dotsConnectionLine	typeref:typename:void
update	src/JShaderLines.cpp	/^void JShaderLines::update(){$/;"	f	class:JShaderLines	typeref:typename:void
update	src/MsgParser.cpp	/^void MsgParser::update() {$/;"	f	class:MsgParser	typeref:typename:void
update	src/modifiers/JModifier.hpp	/^    virtual void update(JEvent* e){};$/;"	f	class:JModifier	typeref:typename:void
update	src/modifiers/JModifierRedraw.hpp	/^    void update(JEvent* e) override{$/;"	f	class:JModifierRedraw	typeref:typename:void
update	src/ofxJVisuals.cpp	/^void ofxJVisuals::update() {$/;"	f	class:ofxJVisuals	typeref:typename:void
update	src/scSynth.hpp	/^    void update(){$/;"	f	class:scSynth	typeref:typename:void
updateCircles	src/Event/dotsBlob.cpp	/^void dotsBlob::updateCircles(){$/;"	f	class:dotsBlob	typeref:typename:void
updateMain	src/Event/JEvent.cpp	/^void JEvent::updateMain(){$/;"	f	class:JEvent	typeref:typename:void
updateModifiers	src/modifiers/JModifier.cpp	/^void JEvent::updateModifiers(){$/;"	f	class:JEvent	typeref:typename:void
updatePos	src/Event/JPhysarum.hpp	/^    ofShader    updatePos;$/;"	m	class:JPhysarum	typeref:typename:ofShader
updatePos	src/Event/particleSystem.h	/^    	ofShader    updatePos;$/;"	m	class:particleSystem	typeref:typename:ofShader
updateRender	src/Event/JPhysarum.hpp	/^    ofShader    updateRender;$/;"	m	class:JPhysarum	typeref:typename:ofShader
updateRender	src/Event/particleSystem.h	/^    	ofShader    updateRender;$/;"	m	class:particleSystem	typeref:typename:ofShader
updateValues	src/MsgParser.cpp	/^bool MsgParser::updateValues(ofxOscMessage &m, JEvent *e) {$/;"	f	class:MsgParser	typeref:typename:bool
updateVel	src/Event/JPhysarum.hpp	/^    ofShader    updateVel;$/;"	m	class:JPhysarum	typeref:typename:ofShader
updateVel	src/Event/particleSystem.h	/^    	ofShader    updateVel;$/;"	m	class:particleSystem	typeref:typename:ofShader
v	src/Event/JEvent.hpp	/^  ofxJVisuals *v;$/;"	m	class:JEvent	typeref:typename:ofxJVisuals *
v	src/Event/JRectangle.hpp	/^    vector<JRectangle*>* v = nullptr; \/\/ Zou ook nog in een vector van pointers naar vector<re/;"	m	class:JRectangle	typeref:typename:vector<JRectangle * > *
v	src/Event/SpaceCube.h	/^    vector<SpaceCube*>* v = nullptr;$/;"	m	class:SpaceCube	typeref:typename:vector<SpaceCube * > *
v	src/MsgParser.hpp	/^    ofxJVisuals* v = nullptr;$/;"	m	class:MsgParser	typeref:typename:ofxJVisuals *
valC	src/Env.hpp	/^    ofColor* valC = nullptr;$/;"	m	class:Pointer	typeref:typename:ofColor *
valF	src/Env.hpp	/^    float* valF = nullptr;$/;"	m	class:Pointer	typeref:typename:float *
valI	src/Env.hpp	/^    int* valI = nullptr;$/;"	m	class:Pointer	typeref:typename:int *
value	src/Env.hpp	/^    float value = 0;$/;"	m	class:Env	typeref:typename:float
values	src/Event/JEventBase.hpp	/^  float *values[NUM_BUSSES];$/;"	m	class:JEventBase	typeref:typename:float * []
values	src/MsgParser.hpp	/^    map<string, short> values;$/;"	m	class:MsgParser	typeref:typename:map<string,short>
valuesToFloatArray	src/Event/JEventBase.hpp	/^  float *valuesToFloatArray() {$/;"	f	class:JEventBase	typeref:typename:float *
vbo	src/Event/particleSystemOpenCL.hpp	/^    GLuint vbo, cbo;$/;"	m	class:particleSystem	typeref:typename:GLuint
vecField	src/Event/particleSystem.h	/^    JVecField* vecField = nullptr;$/;"	m	class:particleSystem	typeref:typename:JVecField *
vecField	src/Event/particleSystemOpenCL.hpp	/^    JVecField* vecField = nullptr;$/;"	m	class:particleSystem	typeref:typename:JVecField *
vecField_hpp	src/Event/JVecField.hpp	/^#define vecField_hpp$/;"	d
vecTex	src/Event/JVecField.hpp	/^    ofTexture vecTex;$/;"	m	class:JVecField	typeref:typename:ofTexture
vel	src/Event/particleSystemOpenCL.cpp	/^    float2 vel;$/;"	m	struct:__anon240f87380108	typeref:typename:float2	file:
velPingPong	src/Event/JPhysarum.hpp	/^    pingPongBuffer velPingPong;$/;"	m	class:JPhysarum	typeref:typename:pingPongBuffer
velPingPong	src/Event/particleSystem.h	/^    	pingPongBuffer velPingPong;$/;"	m	class:particleSystem	typeref:typename:pingPongBuffer
velocity	src/Event/JParticle.h	/^    glm::vec3 velocity = glm::vec3(0);$/;"	m	class:JParticle	typeref:typename:glm::vec3
verticalNoise	src/Event/JNoise.cpp	/^void JNoise::verticalNoise(int l){$/;"	f	class:JNoise	typeref:typename:void
video	src/Event/JVecField.hpp	/^    ofVideoPlayer* video;$/;"	m	class:JVecField	typeref:typename:ofVideoPlayer *
view	src/Event/JMirror.h	/^    ofVec2f view;$/;"	m	class:JMirror	typeref:typename:ofVec2f
visualizer	exampleSimple/src/ofApp.h	/^    ofxJVisuals* visualizer;$/;"	m	class:ofApp	typeref:typename:ofxJVisuals *
visualizer	exampleSimpleTlFix/src/ofApp.h	/^    ofxJVisuals* visualizer;$/;"	m	class:ofApp	typeref:typename:ofxJVisuals *
vorm	src/Event/JVorm.h	/^        JVorm* vorm = nullptr;$/;"	m	class:JVorm::connection	typeref:typename:JVorm *
vs	addon_config.mk	/^vs:$/;"	t
wavetable	src/Wavetable.h	/^    float wavetable[DENSITY];$/;"	m	class:Wavetable	typeref:typename:float[]
wavetables	src/Event/MultiMesh.hpp	/^    Wavetable*** wavetables;$/;"	m	class:MultiMesh	typeref:typename:Wavetable ***
wavetables	src/Event/MultiMeshMaybeTomorrow.hpp	/^    Wavetable*** wavetables;$/;"	m	class:MultiMeshMaybeTomorrow	typeref:typename:Wavetable ***
widthBetweenNodes	src/Event/meshLandscape.hpp	/^    float widthBetweenNodes = 1;$/;"	m	class:meshLandscape	typeref:typename:float
windowResized	exampleSimple/src/ofApp.cpp	/^void ofApp::windowResized(int w, int h) {}$/;"	f	class:ofApp	typeref:typename:void
windowResized	exampleSimpleTlFix/src/ofApp.cpp	/^void ofApp::windowResized(int w, int h){$/;"	f	class:ofApp	typeref:typename:void
writeValue	src/Env.cpp	/^void Pointer::writeValue(float value){$/;"	f	class:Pointer	typeref:typename:void
xPos	src/Event/JVideoPlayer.hpp	/^    int xPos;$/;"	m	class:Bin	typeref:typename:int
xPosSource	src/Event/JVideoPlayer.hpp	/^    int xPosSource;$/;"	m	class:Bin	typeref:typename:int
x_angle	src/Event/SpaceCube.h	/^    float x_angle = 0;$/;"	m	class:SpaceCube	typeref:typename:float
ySpeed	src/Event/JMirror.h	/^    float ySpeed;$/;"	m	class:JMirror	typeref:typename:float
y_angle	src/Event/SpaceCube.h	/^    float y_angle = 0;$/;"	m	class:SpaceCube	typeref:typename:float
z	src/Event/JDivisionGrid.hpp	/^    float z = 100;$/;"	m	class:JPoly	typeref:typename:float
zOffset	src/Event/JDivisionGrid.hpp	/^    float zOffset = 0;$/;"	m	class:JPoly	typeref:typename:float
zoom	src/Event/JEvent.hpp	/^  float zoom = 1.f;$/;"	m	class:JEvent	typeref:typename:float
zoomPP	src/ofxJVisuals.hpp	/^  ZoomBlurPass::Ptr zoomPP = nullptr;$/;"	m	class:ofxJVisuals	typeref:typename:ZoomBlurPass::Ptr
~AlphaBlackScreen	src/AlphaBlackScreen.cpp	/^AlphaBlackScreen::~AlphaBlackScreen(){$/;"	f	class:AlphaBlackScreen
~Env	src/Env.cpp	/^Env::~Env(){$/;"	f	class:Env
~JEvent	src/Event/JEvent.cpp	/^JEvent::~JEvent(){$/;"	f	class:JEvent
~JMirror	src/Event/JMirror.cpp	/^JMirror::~JMirror(){$/;"	f	class:JMirror
~JVorm	src/Event/JVorm.cpp	/^JVorm::~JVorm(){$/;"	f	class:JVorm
~MsgParser	src/MsgParser.cpp	/^MsgParser::~MsgParser() {$/;"	f	class:MsgParser
~ofxJVisuals	src/ofxJVisuals.cpp	/^ofxJVisuals::~ofxJVisuals() {$/;"	f	class:ofxJVisuals
~scSynth	src/scSynth.hpp	/^    ~scSynth(){$/;"	f	class:scSynth
